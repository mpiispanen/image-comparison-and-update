name: Visual Diff and PR Report

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  visual-diff:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install NVIDIA FLIP for image comparison
      run: |
        # Install NVIDIA FLIP from PyPI for high-fidelity image comparison
        pip install flip-evaluator
        flip --help
    
    - name: Setup Python for test execution
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Pillow numpy
    
    - name: Create necessary directories
      run: |
        mkdir -p outputs
        mkdir -p diffs
        mkdir -p golden
    
    - name: Generate test outputs
      run: |
        # Run the application's test suite to generate output images
        python generate_test_images.py
    
    - name: Compare images and generate diffs
      id: compare
      run: |
        # Initialize variables
        CHANGED_IMAGES=""
        CHANGES_DETECTED=false
        
        # Create comparison report with summary table
        echo "# Visual Regression Test Results" > comparison_report.md
        echo "" >> comparison_report.md
        echo "## Summary" >> comparison_report.md
        echo "" >> comparison_report.md
        echo "| File | Status | FLIP Mean Error | Result |" >> comparison_report.md
        echo "|------|--------|-----------------|--------|" >> comparison_report.md
        
        # Initialize summary data
        summary_data=""
        
        # Process each output image
        for output_file in outputs/*.png; do
          if [ ! -f "$output_file" ]; then
            echo "No output images found"
            continue
          fi
          
          filename=$(basename "$output_file")
          golden_file="golden/$filename"
          diff_file="diffs/diff_$filename"
          
          echo "Processing $filename..."
          
          # Check if golden image exists
          if [ ! -f "$golden_file" ]; then
            # New image - no golden master exists
            summary_data="$summary_data| \`$filename\` | 🆕 New | N/A | Needs acceptance |\n"
            
            CHANGED_IMAGES="$CHANGED_IMAGES $filename"
            CHANGES_DETECTED=true
          else
            # Fetch the specific golden LFS file
            git lfs pull --include "$golden_file"
            
            # Compare using NVIDIA FLIP for high-fidelity comparison
            # FLIP outputs difference metrics and generates diff images
            basename_no_ext=$(basename "$filename" .png)
            diff_basename="diff_${basename_no_ext}"
            stats_file="diffs/${diff_basename}_stats.txt"
            
            # Debug: Print the command that will be executed
            echo "Variables:"
            echo "  golden_file: '$golden_file'"
            echo "  output_file: '$output_file'"
            echo "  diff_basename: '$diff_basename'"
            echo "  stats_file: '$stats_file'"
            echo "Golden file exists: $([ -f "$golden_file" ] && echo 'YES' || echo 'NO')"
            echo "Output file exists: $([ -f "$output_file" ] && echo 'YES' || echo 'NO')"
            echo ""
            
            # Ensure both files exist before running FLIP
            if [ ! -f "$golden_file" ]; then
              echo "Error: Golden file does not exist: $golden_file"
              continue
            fi
            if [ ! -f "$output_file" ]; then
              echo "Error: Output file does not exist: $output_file"
              continue
            fi
            
            # Use enhanced FLIP parameters for comprehensive statistics
            echo "Running FLIP command: flip -r '$golden_file' -t '$output_file' -d diffs -b '$diff_basename' -v 2 -txt"
            
            # Run FLIP with enhanced verbosity and text output for detailed statistics
            flip_output=$(flip -r "$golden_file" -t "$output_file" -d diffs -b "$diff_basename" -v 2 -txt 2>&1)
            flip_exit_code=$?
            
            echo "FLIP exit code: $flip_exit_code"
            echo "FLIP output: $flip_output"
            
            # Check if FLIP command succeeded
            if [ $flip_exit_code -ne 0 ]; then
              echo "Error: FLIP command failed with exit code $flip_exit_code"
              echo "Error output: $flip_output"
              summary_data="$summary_data| \`$filename\` | ❌ Error | N/A | FLIP failed |\n"
              continue
            fi
            
            # Extract comprehensive FLIP statistics from the output
            mean_error=$(echo "$flip_output" | grep "Mean:" | awk '{print $2}')
            median_error=$(echo "$flip_output" | grep "Weighted median:" | awk '{print $3}')
            q1_error=$(echo "$flip_output" | grep "1st weighted quartile:" | awk '{print $4}')
            q3_error=$(echo "$flip_output" | grep "3rd weighted quartile:" | awk '{print $4}')
            min_error=$(echo "$flip_output" | grep "Min:" | awk '{print $2}')
            max_error=$(echo "$flip_output" | grep "Max:" | awk '{print $2}')
            ppd=$(echo "$flip_output" | grep "Pixels per degree:" | awk '{print $4}')
            eval_time=$(echo "$flip_output" | grep "Evaluation time:" | awk '{print $3}')
            
            # Check if there's any meaningful difference (FLIP error > 0.001)
            # Using awk for floating point comparison
            is_different=$(echo "$mean_error" | awk '{if ($1 > 0.001) print "yes"; else print "no"}')
            
            if [ "$is_different" = "yes" ]; then
              summary_data="$summary_data| \`$filename\` | 🔄 Changed | $mean_error | Needs review |\n"
              CHANGED_IMAGES="$CHANGED_IMAGES $filename"
              CHANGES_DETECTED=true
            else
              summary_data="$summary_data| \`$filename\` | ✅ Passed | $mean_error | No changes |\n"
            fi
          fi
        done
        
        # Add summary data to report
        echo -e "$summary_data" >> comparison_report.md
        echo "" >> comparison_report.md
        
        # Add detailed results for changed/new images
        echo "## Detailed Results" >> comparison_report.md
        echo "" >> comparison_report.md
        
        # Check if images will be available via GitHub raw URLs
        BRANCH_NAME="${{ github.head_ref }}"
        if [ -z "$BRANCH_NAME" ]; then
          BRANCH_NAME="${{ github.ref_name }}"
        fi
        
        # Store branch name for later use
        echo "REPORT_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        
        # Add fallback note for private repositories
        echo "" >> comparison_report.md
        echo "> **Note**: If images don't display properly, the repository may be private or there may be access issues. In that case, please download the [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) to view the images locally." >> comparison_report.md
        echo "" >> comparison_report.md
        
        # Process each output image again for detailed reports
        for output_file in outputs/*.png; do
          if [ ! -f "$output_file" ]; then
            continue
          fi
          
          filename=$(basename "$output_file")
          golden_file="golden/$filename"
          
          # Check if golden image exists
          if [ ! -f "$golden_file" ]; then
            # New image - no golden master exists
            echo "### 🆕 **New Image:** \`$filename\`" >> comparison_report.md
            echo "" >> comparison_report.md
            echo "| New Output |" >> comparison_report.md
            echo "|------------|" >> comparison_report.md
            echo "| ![New Output](https://raw.githubusercontent.com/${{ github.repository }}/$REPORT_BRANCH_NAME/outputs/$filename) |" >> comparison_report.md
            echo "" >> comparison_report.md
            echo "To accept this new image as the golden master, comment: \`/accept-image $filename\`" >> comparison_report.md
            echo "" >> comparison_report.md
          else
            # Compare using NVIDIA FLIP for high-fidelity comparison
            basename_no_ext=$(basename "$filename" .png)
            diff_basename="diff_${basename_no_ext}"
            stats_file="diffs/${diff_basename}_stats.txt"
            
            # Fetch the specific golden LFS file
            git lfs pull --include "$golden_file"
            
            # Run FLIP again (or reuse previous results if we want to optimize)
            flip_output=$(flip -r "$golden_file" -t "$output_file" -d diffs -b "$diff_basename" -v 2 -txt 2>&1)
            flip_exit_code=$?
            
            if [ $flip_exit_code -eq 0 ]; then
              # Extract comprehensive FLIP statistics
              mean_error=$(echo "$flip_output" | grep "Mean:" | awk '{print $2}')
              median_error=$(echo "$flip_output" | grep "Weighted median:" | awk '{print $3}')
              q1_error=$(echo "$flip_output" | grep "1st weighted quartile:" | awk '{print $4}')
              q3_error=$(echo "$flip_output" | grep "3rd weighted quartile:" | awk '{print $4}')
              min_error=$(echo "$flip_output" | grep "Min:" | awk '{print $2}')
              max_error=$(echo "$flip_output" | grep "Max:" | awk '{print $2}')
              ppd=$(echo "$flip_output" | grep "Pixels per degree:" | awk '{print $4}')
              eval_time=$(echo "$flip_output" | grep "Evaluation time:" | awk '{print $3}')
              
              # Check if there's any meaningful difference
              is_different=$(echo "$mean_error" | awk '{if ($1 > 0.001) print "yes"; else print "no"}')
              
              if [ "$is_different" = "yes" ]; then
                echo "### 🔄 **Changed Image:** \`$filename\`" >> comparison_report.md
                echo "" >> comparison_report.md
                echo "**FLIP Statistics:**" >> comparison_report.md
                echo "- **Mean Error:** $mean_error" >> comparison_report.md
                echo "- **Weighted Median:** $median_error" >> comparison_report.md
                echo "- **Weighted 1st Quartile:** $q1_error" >> comparison_report.md
                echo "- **Weighted 3rd Quartile:** $q3_error" >> comparison_report.md
                echo "- **Min Error:** $min_error" >> comparison_report.md
                echo "- **Max Error:** $max_error" >> comparison_report.md
                echo "- **Pixels Per Degree:** $ppd" >> comparison_report.md
                echo "- **Evaluation Time:** $eval_time" >> comparison_report.md
                echo "" >> comparison_report.md
                echo "| Difference | New Output |" >> comparison_report.md
                echo "|------------|------------|" >> comparison_report.md
                echo "| ![Difference](https://raw.githubusercontent.com/${{ github.repository }}/$REPORT_BRANCH_NAME/diffs/${diff_basename}.png) | ![New Output](https://raw.githubusercontent.com/${{ github.repository }}/$REPORT_BRANCH_NAME/outputs/$filename) |" >> comparison_report.md
                echo "" >> comparison_report.md
                echo "To accept this change, comment: \`/accept-image $filename\`" >> comparison_report.md
                echo "" >> comparison_report.md
              fi
            fi
          fi
        done
        
        # Set outputs for next steps
        echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT
        echo "changed_images=$CHANGED_IMAGES" >> $GITHUB_OUTPUT
        
        # If no changes, add a success message
        if [ "$CHANGES_DETECTED" = "false" ]; then
          echo "✅ **All visual tests passed!** No differences detected." >> comparison_report.md
        fi
    
    - name: Commit images for PR display
      id: commit_images
      run: |
        # Configure git for committing
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Get the correct branch reference - use the PR branch
        BRANCH_NAME="${{ github.head_ref }}"
        if [ -z "$BRANCH_NAME" ]; then
          BRANCH_NAME="${{ github.ref_name }}"
        fi
        
        echo "Using branch: $BRANCH_NAME"
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        
        # Ensure we're on the correct branch
        git checkout "$BRANCH_NAME" || git checkout -b "$BRANCH_NAME"
        
        # Add the generated images to git (temporarily for display purposes)
        git add outputs/ diffs/ || true
        
        # Only commit if there are changes
        if ! git diff --staged --quiet; then
          git commit -m "temp: Add visual diff artifacts for PR display [skip ci]"
          
          # Push and verify success
          if git push origin "$BRANCH_NAME"; then
            echo "images_committed=true" >> $GITHUB_OUTPUT
            echo "Successfully committed and pushed images"
          else
            echo "images_committed=false" >> $GITHUB_OUTPUT
            echo "Failed to push images"
            exit 1
          fi
        else
          echo "images_committed=false" >> $GITHUB_OUTPUT
          echo "No images to commit"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: visual-test-results-${{ github.event.pull_request.number }}
        path: |
          outputs/
          diffs/
        retention-days: 30
    
    - name: Comment PR with results
      if: steps.compare.outputs.changes_detected == 'true' && steps.commit_images.outputs.images_committed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('comparison_report.md', 'utf8');
          
          // Find existing bot comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Visual Regression Test Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: report
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }

    - name: Comment PR with commit failure
      if: steps.compare.outputs.changes_detected == 'true' && steps.commit_images.outputs.images_committed != 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const report = `❌ **Visual differences detected but images could not be displayed**
          
          Visual regression testing found differences, but there was an issue committing the images to display them in this PR comment.
          
          Please check the [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) to download and view the comparison images manually.
          
          **Next steps:**
          1. Download the visual-test-results artifact from the workflow run
          2. Review the images locally
          3. Use \`/accept-image <filename>\` to accept any changes
          `;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: report
          });
    
    - name: Comment PR with success
      if: steps.compare.outputs.changes_detected == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const report = "✅ **All visual tests passed!** No differences detected.";
          
          // Find existing bot comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Visual Regression Test Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: report
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }