name: Visual Diff and PR Report

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - baseline
          - changed
          - mixed

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  visual-diff:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.test_scenario == 'all' && fromJson('["baseline", "changed", "mixed"]') || github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.test_scenario)) || fromJson('["baseline", "changed", "mixed"]') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install NVIDIA FLIP for image comparison
      run: |
        # Install NVIDIA FLIP from PyPI for high-fidelity image comparison
        pip install flip-evaluator
        flip --help
    
    - name: Setup Python for test execution
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Pillow numpy
    
    - name: Create necessary directories
      run: |
        mkdir -p outputs
        mkdir -p diffs
        mkdir -p golden
    
    - name: Generate test outputs
      run: |
        # Use the matrix scenario value
        export TEST_SCENARIO="${{ matrix.scenario }}"
        
        echo "Running test scenario: $TEST_SCENARIO"
        
        # Run the application's test suite to generate output images
        python generate_test_images.py
    
    - name: Compare images and generate diffs
      id: compare
      run: |
        # Initialize variables
        CHANGED_IMAGES=""
        CHANGES_DETECTED=false
        
        # Create comparison report with summary table
        echo "# Visual Regression Test Results - Scenario: ${{ matrix.scenario }}" > comparison_report.md
        echo "" >> comparison_report.md
        echo "**Test Scenario:** \`${{ matrix.scenario }}\` - $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> comparison_report.md
        echo "" >> comparison_report.md
        echo "## Summary" >> comparison_report.md
        echo "" >> comparison_report.md
        echo "| File | Status | FLIP Mean Error | Result |" >> comparison_report.md
        echo "|------|--------|-----------------|--------|" >> comparison_report.md
        
        # Initialize summary data
        summary_data=""
        
        # Process each output image
        for output_file in outputs/*.png; do
          if [ ! -f "$output_file" ]; then
            echo "No output images found"
            continue
          fi
          
          filename=$(basename "$output_file")
          golden_file="golden/$filename"
          diff_file="diffs/diff_$filename"
          
          echo "Processing $filename..."
          
          # Check if golden image exists
          if [ ! -f "$golden_file" ]; then
            # New image - no golden master exists
            summary_data="$summary_data| \`$filename\` | 🆕 New | N/A | Needs acceptance |\n"
            
            CHANGED_IMAGES="$CHANGED_IMAGES $filename"
            CHANGES_DETECTED=true
          else
            # Fetch the specific golden LFS file
            git lfs pull --include "$golden_file"
            
            # Compare using NVIDIA FLIP for high-fidelity comparison
            # FLIP outputs difference metrics and generates diff images
            basename_no_ext=$(basename "$filename" .png)
            diff_basename="diff_${basename_no_ext}"
            stats_file="diffs/${diff_basename}_stats.txt"
            
            # Debug: Print the command that will be executed
            echo "Variables:"
            echo "  golden_file: '$golden_file'"
            echo "  output_file: '$output_file'"
            echo "  diff_basename: '$diff_basename'"
            echo "  stats_file: '$stats_file'"
            echo "Golden file exists: $([ -f "$golden_file" ] && echo 'YES' || echo 'NO')"
            echo "Output file exists: $([ -f "$output_file" ] && echo 'YES' || echo 'NO')"
            echo ""
            
            # Ensure both files exist before running FLIP
            if [ ! -f "$golden_file" ]; then
              echo "Error: Golden file does not exist: $golden_file"
              continue
            fi
            if [ ! -f "$output_file" ]; then
              echo "Error: Output file does not exist: $output_file"
              continue
            fi
            
            # Use enhanced FLIP parameters for comprehensive statistics
            echo "Running FLIP command: flip -r '$golden_file' -t '$output_file' -d diffs -b '$diff_basename' -v 2 -txt"
            
            # Run FLIP with enhanced verbosity and text output for detailed statistics
            flip_output=$(flip -r "$golden_file" -t "$output_file" -d diffs -b "$diff_basename" -v 2 -txt 2>&1)
            flip_exit_code=$?
            
            echo "FLIP exit code: $flip_exit_code"
            echo "FLIP output: $flip_output"
            
            # Check if FLIP command succeeded
            if [ $flip_exit_code -ne 0 ]; then
              echo "Error: FLIP command failed with exit code $flip_exit_code"
              echo "Error output: $flip_output"
              summary_data="$summary_data| \`$filename\` | ❌ Error | N/A | FLIP failed |\n"
              continue
            fi
            
            # Extract comprehensive FLIP statistics from the output
            mean_error=$(echo "$flip_output" | grep "Mean:" | awk '{print $2}')
            median_error=$(echo "$flip_output" | grep "Weighted median:" | awk '{print $3}')
            q1_error=$(echo "$flip_output" | grep "1st weighted quartile:" | awk '{print $4}')
            q3_error=$(echo "$flip_output" | grep "3rd weighted quartile:" | awk '{print $4}')
            min_error=$(echo "$flip_output" | grep "Min:" | awk '{print $2}')
            max_error=$(echo "$flip_output" | grep "Max:" | awk '{print $2}')
            ppd=$(echo "$flip_output" | grep "Pixels per degree:" | awk '{print $4}')
            eval_time=$(echo "$flip_output" | grep "Evaluation time:" | awk '{print $3}')
            
            # Check if there's any meaningful difference (FLIP error > 0.001)
            # Using awk for floating point comparison
            is_different=$(echo "$mean_error" | awk '{if ($1 > 0.001) print "yes"; else print "no"}')
            
            if [ "$is_different" = "yes" ]; then
              summary_data="$summary_data| \`$filename\` | 🔄 Changed | $mean_error | Needs review |\n"
              CHANGED_IMAGES="$CHANGED_IMAGES $filename"
              CHANGES_DETECTED=true
            else
              summary_data="$summary_data| \`$filename\` | ✅ Passed | $mean_error | No changes |\n"
            fi
          fi
        done
        
        # Add summary data to report
        echo -e "$summary_data" >> comparison_report.md
        echo "" >> comparison_report.md
        
        # Add detailed results for changed/new images
        echo "## Detailed Results" >> comparison_report.md
        echo "" >> comparison_report.md
        
        # Note: Image URLs will be updated after upload to gist
        echo "IMAGE_URLS_PLACEHOLDER" >> comparison_report.md
        
        # Set outputs for next steps
        echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT
        echo "changed_images=$CHANGED_IMAGES" >> $GITHUB_OUTPUT
        
        # If no changes, add a success message
        if [ "$CHANGES_DETECTED" = "false" ]; then
          echo "✅ **All visual tests passed!** No differences detected." >> comparison_report.md
        fi
    
    - name: Upload images to GitHub Gist
      id: upload_images
      if: steps.compare.outputs.changes_detected == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          console.log('Starting image upload to gist...');
          
          // Initialize outputs
          core.setOutput('gist_created', 'false');
          core.setOutput('gist_url', '');
          
          try {
            // Collect all images that need to be uploaded
            const filesToUpload = {};
            
            // Add output images
            if (fs.existsSync('outputs')) {
              const outputFiles = fs.readdirSync('outputs').filter(f => f.endsWith('.png'));
              for (const file of outputFiles) {
                const filePath = path.join('outputs', file);
                const content = fs.readFileSync(filePath, { encoding: 'base64' });
                filesToUpload[`outputs_${file}`] = {
                  content: content
                };
                console.log(`Added output file: ${file}`);
              }
            }
            
            // Add diff images
            if (fs.existsSync('diffs')) {
              const diffFiles = fs.readdirSync('diffs').filter(f => f.endsWith('.png'));
              for (const file of diffFiles) {
                const filePath = path.join('diffs', file);
                const content = fs.readFileSync(filePath, { encoding: 'base64' });
                filesToUpload[`diffs_${file}`] = {
                  content: content
                };
                console.log(`Added diff file: ${file}`);
              }
            }
            
            if (Object.keys(filesToUpload).length === 0) {
              console.log('No images to upload');
              return;
            }
            
            // Create a gist with the images
            const gistData = {
              description: `Visual regression test results - PR #${{ github.event.pull_request.number || 'manual' }} - Scenario: ${{ matrix.scenario }} - ${new Date().toISOString()}`,
              public: false, // Private gist but images will be accessible via direct URLs
              files: filesToUpload
            };
            
            console.log(`Creating gist with ${Object.keys(filesToUpload).length} files...`);
            
            const gist = await github.rest.gists.create(gistData);
            
            console.log(`Gist created successfully: ${gist.data.html_url}`);
            console.log(`Gist ID: ${gist.data.id}`);
            
            // Store gist information
            core.setOutput('gist_created', 'true');
            core.setOutput('gist_url', gist.data.html_url);
            core.setOutput('gist_id', gist.data.id);
            
            // Create a mapping of original file names to gist raw URLs
            const imageUrls = {};
            for (const [gistFileName, fileData] of Object.entries(gist.data.files)) {
              const rawUrl = fileData.raw_url;
              console.log(`Image URL: ${gistFileName} -> ${rawUrl}`);
              
              // Map back to original file structure
              if (gistFileName.startsWith('outputs_')) {
                const originalName = gistFileName.replace('outputs_', '');
                imageUrls[`outputs/${originalName}`] = rawUrl;
              } else if (gistFileName.startsWith('diffs_')) {
                const originalName = gistFileName.replace('diffs_', '');
                imageUrls[`diffs/${originalName}`] = rawUrl;
              }
            }
            
            // Store the URL mapping as JSON for later use
            fs.writeFileSync('image_urls.json', JSON.stringify(imageUrls, null, 2));
            
            console.log('Image URLs mapping saved to image_urls.json');
            
          } catch (error) {
            console.error(`Failed to create gist: ${error.message}`);
            console.error(error.stack);
            core.setOutput('gist_created', 'false');
          }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: visual-test-results-${{ matrix.scenario }}-${{ github.event.pull_request.number || github.run_number }}
        path: |
          outputs/
          diffs/
        retention-days: 30
    
    - name: Update comparison report with gist URLs
      if: steps.upload_images.outputs.gist_created == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the image URLs mapping
          const imageUrls = JSON.parse(fs.readFileSync('image_urls.json', 'utf8'));
          
          // Read the current comparison report
          let report = fs.readFileSync('comparison_report.md', 'utf8');
          
          // Build the detailed results section with actual image URLs
          let detailedResults = '';
          
          // Add fallback note
          detailedResults += '> **Note**: Images are hosted on GitHub Gist for reliable display. If images don\'t display properly, please download the [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) to view them locally.\n\n';
          
          // Process each output image for detailed reports
          const outputFiles = fs.existsSync('outputs') ? fs.readdirSync('outputs').filter(f => f.endsWith('.png')) : [];
          
          for (const filename of outputFiles) {
            const outputPath = `outputs/${filename}`;
            const goldenPath = `golden/${filename}`;
            
            if (!fs.existsSync(goldenPath)) {
              // New image - no golden master exists
              const imageUrl = imageUrls[outputPath];
              if (imageUrl) {
                detailedResults += `### 🆕 **New Image:** \`${filename}\`\n\n`;
                detailedResults += '| New Output |\n';
                detailedResults += '|------------|\n';
                detailedResults += `| ![New Output](${imageUrl}) |\n\n`;
                detailedResults += `To accept this new image as the golden master, comment: \`/accept-image ${filename}\`\n\n`;
              }
            } else {
              // Check if there are differences (look for corresponding diff file)
              const basenameName = filename.replace('.png', '');
              const diffFilename = `diff_${basenameName}.png`;
              const diffPath = `diffs/${diffFilename}`;
              
              if (imageUrls[diffPath]) {
                // There are differences
                const outputImageUrl = imageUrls[outputPath];
                const diffImageUrl = imageUrls[diffPath];
                
                if (outputImageUrl && diffImageUrl) {
                  detailedResults += `### 🔄 **Changed Image:** \`${filename}\`\n\n`;
                  
                  // Add FLIP statistics if available (we'll add this info to the summary already)
                  detailedResults += '| Difference | New Output |\n';
                  detailedResults += '|------------|------------|\n';
                  detailedResults += `| ![Difference](${diffImageUrl}) | ![New Output](${outputImageUrl}) |\n\n`;
                  detailedResults += `To accept this change, comment: \`/accept-image ${filename}\`\n\n`;
                }
              }
            }
          }
          
          // Replace the placeholder with actual detailed results
          report = report.replace('IMAGE_URLS_PLACEHOLDER', detailedResults);
          
          // Write the updated report
          fs.writeFileSync('comparison_report.md', report);
          
          console.log('Updated comparison report with gist URLs');

    - name: Verify image accessibility
      id: verify_images
      if: steps.upload_images.outputs.gist_created == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const https = require('https');
          const fs = require('fs');
          
          try {
            // Read the image URLs mapping
            const imageUrls = JSON.parse(fs.readFileSync('image_urls.json', 'utf8'));
            
            // Test accessibility of one image URL
            const testUrls = Object.values(imageUrls);
            if (testUrls.length > 0) {
              const testUrl = testUrls[0];
              console.log(`Testing image accessibility: ${testUrl}`);
              
              // Make a HEAD request to check if the image is accessible
              const response = await fetch(testUrl, { method: 'HEAD' });
              if (response.ok) {
                console.log('Images are accessible via gist URLs');
                core.setOutput('images_accessible', 'true');
              } else {
                console.log(`Image accessibility test failed: ${response.status}`);
                core.setOutput('images_accessible', 'false');
              }
            } else {
              console.log('No image URLs to test');
              core.setOutput('images_accessible', 'false');
            }
          } catch (error) {
            console.log(`Image accessibility check failed: ${error.message}`);
            core.setOutput('images_accessible', 'false');
          }

    - name: Debug outputs before commenting
      run: |
        echo "=== Debug Step Outputs ==="
        echo "changes_detected: '${{ steps.compare.outputs.changes_detected }}'"
        echo "gist_created: '${{ steps.upload_images.outputs.gist_created }}'"
        echo "gist_url: '${{ steps.upload_images.outputs.gist_url }}'"
        echo "changed_images: '${{ steps.compare.outputs.changed_images }}'"
        echo "images_accessible: '${{ steps.verify_images.outputs.images_accessible }}'"
        echo "========================="

    - name: Comment PR with results
      if: steps.compare.outputs.changes_detected == 'true' && steps.upload_images.outputs.gist_created == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('comparison_report.md', 'utf8');
          
          // Clean up old bot comments for this scenario first
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComments = comments.data.filter(comment => 
            comment.user.type === 'Bot' && 
            (comment.body.includes('Visual Regression Test Results - Scenario: ${{ matrix.scenario }}') ||
             (comment.body.includes('Visual Regression Test Results') && 
              comment.body.includes('Scenario: ${{ matrix.scenario }}')))
          );
          
          // Delete old bot comments to avoid confusion
          for (const comment of botComments) {
            try {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
              console.log(`Deleted old bot comment: ${comment.id}`);
            } catch (error) {
              console.log(`Failed to delete comment ${comment.id}: ${error.message}`);
            }
          }
          
          // Always create a new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: report
          });

    - name: Comment PR with upload failure
      if: steps.compare.outputs.changes_detected == 'true' && steps.upload_images.outputs.gist_created != 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Try to generate a report using artifact links
          let report = `❌ **Visual differences detected - Scenario: ${{ matrix.scenario }}**\n\n`;
          
          // Check if we have a comparison report
          if (fs.existsSync('comparison_report.md')) {
            const baseReport = fs.readFileSync('comparison_report.md', 'utf8');
            
            // Use the base report but without image URLs since gist creation failed
            const modifiedReport = baseReport
              .replace(/IMAGE_URLS_PLACEHOLDER/g, 
                       '🖼️ **Images available in artifacts** (gist upload failed)\n\nPlease download the workflow artifacts to view the images.')
              .replace(/!\[([^\]]*)\]\([^)]+\)/g, '🖼️ **$1** (see artifact download below)');
            
            report += modifiedReport + '\n\n';
          }
          
          report += `⚠️ **Images could not be uploaded to gist for direct display**
          
          The images are available for download from the workflow artifacts:
          
          📦 **Download artifacts:** [visual-test-results-${{ matrix.scenario }}-${{ github.event.pull_request.number || github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          **Next steps:**
          1. Click the artifact link above
          2. Download the \`visual-test-results-${{ matrix.scenario }}-${{ github.event.pull_request.number || github.run_number }}\` artifact
          3. Extract and review the images in the \`outputs/\` and \`diffs/\` folders
          4. Use \`/accept-image <filename>\` to accept any changes
          
          **Debug info:** Image upload to gist failed. This may be due to GitHub API limits or permissions.`;
          
          // Clean up old bot comments for this scenario first
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComments = comments.data.filter(comment => 
            comment.user.type === 'Bot' && 
            (comment.body.includes('Visual Regression Test Results - Scenario: ${{ matrix.scenario }}') ||
             (comment.body.includes('Visual Regression Test Results') && 
              comment.body.includes('Scenario: ${{ matrix.scenario }}')))
          );
          
          // Delete old bot comments to avoid confusion
          for (const comment of botComments) {
            try {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
              console.log(`Deleted old bot comment: ${comment.id}`);
            } catch (error) {
              console.log(`Failed to delete comment ${comment.id}: ${error.message}`);
            }
          }
          
          // Always create a new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: report
          });
    
    - name: Comment PR with success
      if: steps.compare.outputs.changes_detected == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const report = "✅ **Visual tests passed for scenario \`${{ matrix.scenario }}\`!** No differences detected.\n\n**Test Scenario:** \`${{ matrix.scenario }}\` - " + new Date().toISOString().replace('T', ' ').substr(0, 19) + " UTC";
          
          // Clean up old bot comments for this scenario first
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComments = comments.data.filter(comment => 
            comment.user.type === 'Bot' && 
            (comment.body.includes('Visual Regression Test Results - Scenario: ${{ matrix.scenario }}') ||
             comment.body.includes('Visual tests passed for scenario `${{ matrix.scenario }}`') ||
             (comment.body.includes('Visual Regression Test Results') && 
              comment.body.includes('Scenario: ${{ matrix.scenario }}')))
          );
          
          // Delete old bot comments to avoid confusion
          for (const comment of botComments) {
            try {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
              console.log(`Deleted old bot comment: ${comment.id}`);
            } catch (error) {
              console.log(`Failed to delete comment ${comment.id}: ${error.message}`);
            }
          }
          
          // Always create a new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: report
          });

