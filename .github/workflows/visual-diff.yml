name: Visual Diff and PR Report

on:
  workflow_call:
    inputs:
      outputs_directory:
        description: 'Directory containing output images to compare'
        required: false
        default: 'outputs'
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  visual-diff:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install NVIDIA FLIP for image comparison
      run: |
        # Install NVIDIA FLIP from PyPI for high-fidelity image comparison
        pip install flip-evaluator
        flip --help
    
    - name: Create necessary directories
      run: |
        mkdir -p diffs
        mkdir -p golden
    
    - name: Check for existing test images
      id: check_images
      run: |
        # Use configurable outputs directory
        OUTPUTS_DIR="${{ inputs.outputs_directory || 'outputs' }}"
        
        # Check if test images exist in the outputs directory
        if [ ! -d "$OUTPUTS_DIR" ] || [ -z "$(ls -A $OUTPUTS_DIR/ 2>/dev/null)" ]; then
          echo "❌ No test images found in $OUTPUTS_DIR/ directory"
          echo "The visual diff job expects test images to already exist in $OUTPUTS_DIR/"
          echo "These should be generated by your application's CI pipeline, not by this workflow"
          echo ""
          echo "For testing the visual diff system itself, use the separate test-visual-diff workflow"
          exit 1
        fi
        
        # Count and list available images
        IMAGE_COUNT=$(ls -1 $OUTPUTS_DIR/*.png 2>/dev/null | wc -l)
        echo "Found $IMAGE_COUNT test images to compare:"
        ls -la $OUTPUTS_DIR/
        
        echo "image_count=$IMAGE_COUNT" >> $GITHUB_OUTPUT
        echo "outputs_dir=$OUTPUTS_DIR" >> $GITHUB_OUTPUT
    
    - name: Compare images and generate diffs
      id: compare
      run: |
        # Use configurable outputs directory
        OUTPUTS_DIR="${{ steps.check_images.outputs.outputs_dir }}"
        
        # Initialize variables
        CHANGED_IMAGES=""
        CHANGES_DETECTED=false
        
        # Create comparison report with summary table
        echo "# Visual Regression Test Results" > comparison_report.md
        echo "" >> comparison_report.md
        echo "**Test Run:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> comparison_report.md
        echo "" >> comparison_report.md
        echo "## Summary" >> comparison_report.md
        echo "" >> comparison_report.md
        echo "| File | Status | FLIP Mean Error | Result |" >> comparison_report.md
        echo "|------|--------|-----------------|--------|" >> comparison_report.md
        
        # Initialize summary data and detailed results
        summary_data=""
        
        # Initialize detailed results section
        echo "" > detailed_results.md
        echo "## Detailed Results" >> detailed_results.md
        echo "" >> detailed_results.md
        
        # Process each output image
        for output_file in $OUTPUTS_DIR/*.png; do
          if [ ! -f "$output_file" ]; then
            echo "No output images found"
            continue
          fi
          
          filename=$(basename "$output_file")
          golden_file="golden/$filename"
          diff_file="diffs/diff_$filename"
          
          echo "Processing $filename..."
          
          # Check if golden image exists
          if [ ! -f "$golden_file" ]; then
            # New image - no golden master exists
            summary_data="$summary_data| \`$filename\` | 🆕 New | N/A | Needs acceptance |\n"
            
            # Add detailed analysis for new image
            echo "### 🆕 $filename (New Image)" >> detailed_results.md
            echo "" >> detailed_results.md
            echo "**Status:** New image detected - no golden master exists" >> detailed_results.md
            echo "**Action Required:** This image needs to be accepted as a new golden master" >> detailed_results.md
            echo "**File Size:** $(stat -c%s "$output_file" 2>/dev/null || echo 'Unknown') bytes" >> detailed_results.md
            
            # Get image dimensions using Python (more reliable than identify)
            dimensions=$(python3 -c "from PIL import Image; img = Image.open('$output_file'); print(f'{img.width}x{img.height}')" 2>/dev/null || echo 'Unknown')
            echo "**Dimensions:** $dimensions" >> detailed_results.md
            echo "" >> detailed_results.md
            
            # Add image placeholder for new images
            echo "**New Output (Actual):**" >> detailed_results.md
            echo "NEW_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
            echo "" >> detailed_results.md
            
            echo "To accept this new image: \`/accept-image $filename\`" >> detailed_results.md
            echo "" >> detailed_results.md
            echo "---" >> detailed_results.md
            echo "" >> detailed_results.md
            
            CHANGED_IMAGES="$CHANGED_IMAGES $filename"
            CHANGES_DETECTED=true
          else
            # Fetch the specific golden LFS file
            git lfs pull --include "$golden_file"
            
            # Compare using NVIDIA FLIP for high-fidelity comparison
            # FLIP outputs difference metrics and generates diff images
            basename_no_ext=$(basename "$filename" .png)
            diff_basename="diff_${basename_no_ext}"
            stats_file="diffs/${diff_basename}_stats.txt"
            
            # Debug: Print the command that will be executed
            echo "Variables:"
            echo "  golden_file: '$golden_file'"
            echo "  output_file: '$output_file'"
            echo "  diff_basename: '$diff_basename'"
            echo "  stats_file: '$stats_file'"
            echo "Golden file exists: $([ -f "$golden_file" ] && echo 'YES' || echo 'NO')"
            echo "Output file exists: $([ -f "$output_file" ] && echo 'YES' || echo 'NO')"
            echo ""
            
            # Ensure both files exist before running FLIP
            if [ ! -f "$golden_file" ]; then
              echo "Error: Golden file does not exist: $golden_file"
              continue
            fi
            if [ ! -f "$output_file" ]; then
              echo "Error: Output file does not exist: $output_file"
              continue
            fi
            
            # Use enhanced FLIP parameters for comprehensive statistics
            echo "Running FLIP command: flip -r '$golden_file' -t '$output_file' -d diffs -b '$diff_basename' -v 2 -txt"
            
            # Run FLIP with enhanced verbosity and text output for detailed statistics
            flip_output=$(flip -r "$golden_file" -t "$output_file" -d diffs -b "$diff_basename" -v 2 -txt 2>&1)
            flip_exit_code=$?
            
            echo "FLIP exit code: $flip_exit_code"
            echo "FLIP output: $flip_output"
            
            # Check if FLIP command succeeded
            if [ $flip_exit_code -ne 0 ]; then
              echo "Error: FLIP command failed with exit code $flip_exit_code"
              echo "Error output: $flip_output"
              summary_data="$summary_data| \`$filename\` | ❌ Error | N/A | FLIP failed |\n"
              
              # Add detailed error information
              echo "### ❌ $filename (Comparison Error)" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Status:** FLIP comparison failed" >> detailed_results.md
              echo "**Error Code:** $flip_exit_code" >> detailed_results.md
              echo "**Error Output:**" >> detailed_results.md
              echo "\`\`\`" >> detailed_results.md
              echo "$flip_output" >> detailed_results.md
              echo "\`\`\`" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "---" >> detailed_results.md
              echo "" >> detailed_results.md
              continue
            fi
            
            # Extract comprehensive FLIP statistics from the output
            mean_error=$(echo "$flip_output" | grep "Mean:" | awk '{print $2}')
            median_error=$(echo "$flip_output" | grep "Weighted median:" | awk '{print $3}')
            q1_error=$(echo "$flip_output" | grep "1st weighted quartile:" | awk '{print $4}')
            q3_error=$(echo "$flip_output" | grep "3rd weighted quartile:" | awk '{print $4}')
            min_error=$(echo "$flip_output" | grep "Min:" | awk '{print $2}')
            max_error=$(echo "$flip_output" | grep "Max:" | awk '{print $2}')
            ppd=$(echo "$flip_output" | grep "Pixels per degree:" | awk '{print $4}')
            eval_time=$(echo "$flip_output" | grep "Evaluation time:" | awk '{print $3}')
            
            # Check if there's any meaningful difference (FLIP error > 0.001)
            # Using awk for floating point comparison
            is_different=$(echo "$mean_error" | awk '{if ($1 > 0.001) print "yes"; else print "no"}')
            
            # Add detailed analysis section for this image
            if [ "$is_different" = "yes" ]; then
              summary_data="$summary_data| \`$filename\` | 🔄 Changed | $mean_error | Needs review |\n"
              CHANGED_IMAGES="$CHANGED_IMAGES $filename"
              CHANGES_DETECTED=true
              
              # Add comprehensive detailed analysis for changed image
              echo "### 🔄 $filename (Changed)" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Status:** Visual differences detected" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**FLIP Analysis Results:**" >> detailed_results.md
              echo "- **Mean Error:** ${mean_error:-'N/A'}" >> detailed_results.md
              echo "- **Median Error:** ${median_error:-'N/A'}" >> detailed_results.md
              echo "- **1st Quartile:** ${q1_error:-'N/A'}" >> detailed_results.md
              echo "- **3rd Quartile:** ${q3_error:-'N/A'}" >> detailed_results.md
              echo "- **Min Error:** ${min_error:-'N/A'}" >> detailed_results.md
              echo "- **Max Error:** ${max_error:-'N/A'}" >> detailed_results.md
              echo "- **Pixels per Degree:** ${ppd:-'N/A'}" >> detailed_results.md
              echo "- **Evaluation Time:** ${eval_time:-'N/A'}" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Interpretation:**" >> detailed_results.md
              if [ -n "$mean_error" ]; then
                mean_threshold=$(echo "$mean_error" | awk '{
                  if ($1 > 0.1) print "High - significant visual differences"
                  else if ($1 > 0.01) print "Medium - noticeable differences"
                  else print "Low - subtle differences"
                }')
                echo "- Mean error level: $mean_threshold" >> detailed_results.md
              fi
              echo "" >> detailed_results.md
              
              # Add image placeholders for changed images
              echo "**Golden Master (Expected):**" >> detailed_results.md
              echo "GOLDEN_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**New Output (Actual):**" >> detailed_results.md
              echo "NEW_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Visual Difference (Highlighted Changes):**" >> detailed_results.md
              echo "DIFF_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
              echo "" >> detailed_results.md
              
              echo "**Action Required:** Review the visual differences and accept if intentional" >> detailed_results.md
              echo "To accept this change: \`/accept-image $filename\`" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "---" >> detailed_results.md
              echo "" >> detailed_results.md
            else
              summary_data="$summary_data| \`$filename\` | ✅ Passed | $mean_error | No changes |\n"
              
              # Add detailed analysis for passed image
              echo "### ✅ $filename (Passed)" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Status:** No significant visual differences detected" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**FLIP Analysis Results:**" >> detailed_results.md
              echo "- **Mean Error:** ${mean_error:-'N/A'} (below significance threshold)" >> detailed_results.md
              echo "- **Median Error:** ${median_error:-'N/A'}" >> detailed_results.md
              echo "- **Min Error:** ${min_error:-'N/A'}" >> detailed_results.md
              echo "- **Max Error:** ${max_error:-'N/A'}" >> detailed_results.md
              echo "- **Pixels per Degree:** ${ppd:-'N/A'}" >> detailed_results.md
              echo "- **Evaluation Time:** ${eval_time:-'N/A'}" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Result:** Image matches golden master within acceptable tolerance" >> detailed_results.md
              echo "" >> detailed_results.md
              
              # Add image placeholders for passed images (still useful to show what matched)
              echo "**Golden Master (Expected):**" >> detailed_results.md
              echo "GOLDEN_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**New Output (Actual):**" >> detailed_results.md
              echo "NEW_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
              echo "" >> detailed_results.md
              
              echo "---" >> detailed_results.md
              echo "" >> detailed_results.md
            fi
          fi
        done
        
        # Add summary data to report
        echo -e "$summary_data" >> comparison_report.md
        echo "" >> comparison_report.md
        
        # Append detailed results to the main report
        cat detailed_results.md >> comparison_report.md
        
        # Add image embedding placeholder for later replacement
        echo "IMAGE_EMBEDDING_PLACEHOLDER" >> comparison_report.md
        
        # Set outputs for next steps
        echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT
        echo "changed_images=$CHANGED_IMAGES" >> $GITHUB_OUTPUT
        
        # If no changes, add a success message
        if [ "$CHANGES_DETECTED" = "false" ]; then
          echo "✅ **All visual tests passed!** No differences detected." >> comparison_report.md
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: visual-test-results-${{ github.event.pull_request.number || github.run_number }}
        path: |
          ${{ steps.check_images.outputs.outputs_dir }}/
          diffs/
          golden/
          comparison_report.md
        retention-days: 30
    
    - name: Commit images to temporary branch for display
      id: commit_images
      run: |
        # Use configurable outputs directory
        OUTPUTS_DIR="${{ steps.check_images.outputs.outputs_dir }}"
        
        # Debug: Show current state before committing
        echo "=== Debug: Pre-commit state ==="
        echo "PWD: $(pwd)"
        echo "Current branch: $(git branch --show-current)"
        echo "Files in $OUTPUTS_DIR/:"
        ls -la $OUTPUTS_DIR/ || echo "$OUTPUTS_DIR/ directory not found"
        echo "Files in diffs/:"
        ls -la diffs/ || echo "diffs/ directory not found"
        echo "Files in golden/:"
        ls -la golden/ || echo "golden/ directory not found"
        echo "Git status before commit:"
        git status
        echo "=============================================="
        
        # Create a unique branch name for this PR and run
        BRANCH_NAME="visual-diff-pr-${{ github.event.pull_request.number || 'manual' }}-run-${{ github.run_id }}"
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        
        # Store current branch/commit for restoration
        ORIGINAL_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        ORIGINAL_COMMIT=$(git rev-parse HEAD)
        
        echo "=== Debug: Branch info ==="
        echo "Original branch: $ORIGINAL_BRANCH"
        echo "Original commit: $ORIGINAL_COMMIT"
        echo "New branch will be: $BRANCH_NAME"
        echo "=========================="
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create a temporary directory to store extracted binary content
        TEMP_GOLDEN_DIR="/tmp/golden_binary_$$"
        mkdir -p "$TEMP_GOLDEN_DIR"
        
        # Extract actual binary content from LFS before creating temporary branch
        echo "=== Debug: Extracting golden images from LFS ==="
        if [ -d "golden" ]; then
          echo "Golden images found in original branch:"
          ls -la golden/ || echo "No golden images in directory"
          
          # Extract binary content for each golden image
          for golden_file in golden/*.png golden/*.jpg golden/*.jpeg; do
            if [ -f "$golden_file" ]; then
              filename=$(basename "$golden_file")
              echo "Extracting binary content for $golden_file..."
              
              # Use git lfs smudge to extract actual binary content from LFS
              temp_file="$TEMP_GOLDEN_DIR/$filename"
              if git lfs smudge < "$golden_file" > "$temp_file" 2>/dev/null; then
                # Verify we got actual binary image data
                if file "$temp_file" | grep -q "PNG image data\|JPEG image data"; then
                  echo "✅ Successfully extracted binary image: $filename"
                  ls -la "$temp_file"
                else
                  echo "❌ $filename: git lfs smudge did not return image data, trying direct copy"
                  cp "$golden_file" "$temp_file"
                fi
              else
                echo "❌ git lfs smudge failed for $golden_file, using direct copy"
                cp "$golden_file" "$temp_file"
              fi
            fi
          done
        else
          echo "No golden directory found"
        fi
        
        # Create and switch to the temporary branch
        echo "Creating and switching to branch: $BRANCH_NAME"
        git checkout -b "$BRANCH_NAME"
        
        # CRITICAL: Remove .gitattributes FIRST and commit it to prevent LFS tracking
        echo "=== Debug: Disabling LFS and gitignore in temporary branch ==="
        echo "Removing .gitattributes to prevent LFS tracking..."
        rm -f .gitattributes
        
        echo "Temporarily removing .gitignore to allow outputs/ and diffs/ to be committed..."
        rm -f .gitignore
        
        # Commit the .gitattributes and .gitignore removal first to ensure no LFS tracking or ignoring
        git add .gitattributes .gitignore 2>/dev/null || echo ".gitattributes and .gitignore already removed"
        git commit -m "Remove LFS tracking and gitignore for image display branch" --allow-empty
        echo "✅ LFS tracking and gitignore disabled in temporary branch"
        echo "================================================"
        
        # Remove the original golden directory completely and recreate with binary files
        echo "=== Debug: Setting up golden images in temporary branch ==="
        rm -rf golden/
        mkdir -p golden/
        
        # Install the extracted binary files as completely new files
        if [ -d "$TEMP_GOLDEN_DIR" ]; then
          for binary_file in "$TEMP_GOLDEN_DIR"/*; do
            if [ -f "$binary_file" ]; then
              filename=$(basename "$binary_file")
              echo "Installing binary golden image: $filename"
              cp "$binary_file" "golden/$filename"
              
              # Verify it's actual binary data in the temp branch
              if file "golden/$filename" | grep -q "PNG image data\|JPEG image data"; then
                echo "✅ golden/$filename is confirmed binary image data"
                ls -la "golden/$filename"
              else
                echo "❌ golden/$filename is not valid image data"
                head -2 "golden/$filename"
              fi
            fi
          done
        fi
        
        # Since LFS is now disabled, these should be added as regular binary files
        echo "=== Debug: Ensuring golden images are treated as regular binary files ==="
        echo "Git LFS status in temporary branch:"
        git lfs ls-files || echo "No LFS files (this is expected)"
        echo "=============================================="
        
        # Add all generated images and verify what's being added
        # Note: outputs directory and diffs/ were in .gitignore, but we removed it above
        echo "=== Debug: Adding files to git ==="
        echo "Current git status before adding:"
        git status --porcelain
        
        echo "Adding $OUTPUTS_DIR/:"
        if git add $OUTPUTS_DIR/; then
          echo "✅ $OUTPUTS_DIR/ added successfully"
        else
          echo "❌ Failed to add $OUTPUTS_DIR/"
        fi
        
        echo "Adding diffs/:"
        if git add diffs/; then
          echo "✅ diffs/ added successfully" 
        else
          echo "❌ Failed to add diffs/"
        fi
        
        echo "Adding golden/:"
        if git add golden/; then
          echo "✅ golden/ added successfully"
        else
          echo "❌ Failed to add golden/"
        fi
        
        echo "Git status after adding:"
        git status --porcelain
        echo "==========================="
        
        # Commit if there are changes
        if ! git diff --cached --quiet; then
          echo "=== Debug: Changes detected, committing ==="
          echo "Files to be committed:"
          git diff --cached --name-only
          echo "Committing changes..."
          
          git commit -m "Temporary visual diff images for PR #${{ github.event.pull_request.number || github.run_number }}"
          
          echo "Commit successful, pushing to origin with retry logic..."
          # Push the branch with retry logic for race conditions
          PUSH_SUCCESS=false
          for attempt in 1 2 3; do
            echo "Push attempt $attempt..."
            if git push origin "$BRANCH_NAME"; then
              PUSH_SUCCESS=true
              echo "✅ Push successful on attempt $attempt"
              break
            else
              echo "❌ Push failed on attempt $attempt"
              if [ $attempt -lt 3 ]; then
                echo "Waiting before retry..."
                sleep $((attempt * 2))
                # Try to pull any conflicting changes and retry
                git pull origin "$BRANCH_NAME" --allow-unrelated-histories || echo "No remote branch to pull"
              fi
            fi
          done
          
          if [ "$PUSH_SUCCESS" = "true" ]; then
            echo "images_committed=true" >> $GITHUB_OUTPUT
            echo "✅ Successfully committed images to branch: $BRANCH_NAME"
            
            # Debug: Verify images are accessible via HTTP URLs (for workflow debugging)
            echo "=== Debug: Verifying image commit success ==="
            REPO_URL="https://raw.githubusercontent.com/${{ github.repository }}/$BRANCH_NAME"
            echo "Repository URL: $REPO_URL"
            echo "Expected image URLs:"
            for output_file in $OUTPUTS_DIR/*.png; do
              if [ -f "$output_file" ]; then
                filename=$(basename "$output_file")
                echo "  Golden: $REPO_URL/golden/$filename"
                echo "  Output: $REPO_URL/$OUTPUTS_DIR/$filename"
                echo "  Diff: $REPO_URL/diffs/diff_$filename"
              fi
            done
            echo "================================================================"
          else
            echo "images_committed=false" >> $GITHUB_OUTPUT
            echo "❌ Failed to push after 3 attempts"
            echo "This will prevent image embedding in the PR comment"
          fi
        else
          echo "images_committed=false" >> $GITHUB_OUTPUT
          echo "❌ No changes to commit - this indicates the images were not generated or available"
          echo "This will prevent image embedding in the PR comment"
          echo "Debugging git status:"
          git status
          echo "Files in outputs directory:"
          ls -la $OUTPUTS_DIR/ || echo "outputs directory not found"
          echo "Files in diffs directory:"
          ls -la diffs/ || echo "diffs directory not found"
          echo "Files in golden directory:"
          ls -la golden/ || echo "golden directory not found"
        fi
        
        # Clean up temporary directory
        echo "Cleaning up temporary golden images directory..."
        rm -rf "$TEMP_GOLDEN_DIR" || echo "Failed to clean up temporary directory"
        
        # Return to original branch
        echo "Returning to original branch: $ORIGINAL_BRANCH"
        git checkout "$ORIGINAL_BRANCH"
    
    - name: Return to original branch
      if: always()
      run: |
        # Ensure we're back on the original branch for any subsequent steps
        ORIGINAL_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null || echo "HEAD")
        if [[ "$ORIGINAL_BRANCH" == visual-diff-* ]]; then
          git checkout ${{ github.head_ref || github.ref_name || 'main' }}
        fi

    - name: Generate comprehensive comparison report with embedded images
      id: generate_report
      run: |
        # Use configurable outputs directory
        OUTPUTS_DIR="${{ steps.check_images.outputs.outputs_dir }}"
        
        # Read the current comparison report
        if [ -f comparison_report.md ]; then
          BRANCH_NAME="${{ steps.commit_images.outputs.branch_name }}"
          
          if [ "${{ steps.commit_images.outputs.images_committed }}" = "true" ]; then
            # Update the comparison report with embedded GitHub raw URLs
            REPO_URL="https://raw.githubusercontent.com/${{ github.repository }}/$BRANCH_NAME"
            echo "=== Image Embedding: ENABLED ==="
            echo "Using repository URL: $REPO_URL"
            echo "Branch name: $BRANCH_NAME"
            
            # Process each output image to replace placeholders with actual image URLs
            for output_file in $OUTPUTS_DIR/*.png; do
              if [ ! -f "$output_file" ]; then
                continue
              fi
              
              filename=$(basename "$output_file")
              golden_file="golden/$filename"
              
              echo "=== Processing image embedding for: $filename ==="
              
              # Define image URLs
              golden_url="$REPO_URL/golden/$filename"
              output_url="$REPO_URL/$OUTPUTS_DIR/$filename"
              diff_url="$REPO_URL/diffs/diff_$filename"
              
              # Replace placeholders with actual image markdown
              # For golden images (if they exist)
              if [ -f "$golden_file" ] || grep -q "GOLDEN_IMAGE_PLACEHOLDER_${filename}" comparison_report.md; then
                echo "  Replacing GOLDEN_IMAGE_PLACEHOLDER_${filename} with $golden_url"
                sed -i "s|GOLDEN_IMAGE_PLACEHOLDER_${filename}|![Golden Master]($golden_url)|g" comparison_report.md
              fi
              
              # For new/output images (always exists)
              echo "  Replacing NEW_IMAGE_PLACEHOLDER_${filename} with $output_url"
              sed -i "s|NEW_IMAGE_PLACEHOLDER_${filename}|![New Output]($output_url)|g" comparison_report.md
              
              # For diff images (only if it was generated)
              if [ -f "diffs/diff_$filename" ]; then
                echo "  Replacing DIFF_IMAGE_PLACEHOLDER_${filename} with $diff_url"
                sed -i "s|DIFF_IMAGE_PLACEHOLDER_${filename}|![Visual Difference]($diff_url)|g" comparison_report.md
              else
                # Remove diff placeholder if no diff was generated
                echo "  Removing DIFF_IMAGE_PLACEHOLDER_${filename} (no diff generated)"
                sed -i "/DIFF_IMAGE_PLACEHOLDER_${filename}/d" comparison_report.md
              fi
            done
            
            # Add acceptance commands section and download backup as footnote
            echo "" >> comparison_report.md
            echo "## 🔧 Accept New Images" >> comparison_report.md
            echo "" >> comparison_report.md
            
            CHANGED_IMAGES="${{ steps.compare.outputs.changed_images }}"
            if [ -n "$CHANGED_IMAGES" ] && [ "$CHANGED_IMAGES" != " " ]; then
              echo "To accept any of the new output images as golden masters, copy and paste the relevant commands below:" >> comparison_report.md
              echo "" >> comparison_report.md
              echo "\`\`\`" >> comparison_report.md
              for filename in $CHANGED_IMAGES; do
                echo "/accept-image $filename" >> comparison_report.md
              done
              echo "\`\`\`" >> comparison_report.md
              echo "" >> comparison_report.md
              echo "> **Note:** These commands will commit the new images to the **PR branch** (not the temporary display branch) and update the golden master files for future comparisons." >> comparison_report.md
            else
              echo "No changed images require acceptance." >> comparison_report.md
            fi
            
            echo "" >> comparison_report.md
            echo "## 📦 Backup Download" >> comparison_report.md
            echo "" >> comparison_report.md
            echo "> **Note:** Images may take a few moments to load due to CDN propagation. If images don't display immediately, please refresh the page or try again in a minute." >> comparison_report.md
            echo "" >> comparison_report.md
            echo "If images don't load above, download the complete results: **[Visual Test Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**" >> comparison_report.md
            echo "" >> comparison_report.md
            echo "> 🧹 The temporary branch \`$BRANCH_NAME\` will be automatically cleaned up after 7 days." >> comparison_report.md
            
            # Remove the placeholder since we've embedded images directly
            sed -i '/IMAGE_EMBEDDING_PLACEHOLDER/d' comparison_report.md
            
            echo "✅ Enhanced comparison report generated with embedded images in detailed results"
          else
            echo "=== Image Embedding: DISABLED ==="
            echo "❌ Images were not committed, using enhanced fallback"
            echo "Reason: steps.commit_images.outputs.images_committed = '${{ steps.commit_images.outputs.images_committed }}'"
            
            # Enhanced fallback: Replace placeholders with artifact download links and file info
            for output_file in $OUTPUTS_DIR/*.png; do
              if [ ! -f "$output_file" ]; then
                continue
              fi
              
              filename=$(basename "$output_file")
              golden_file="golden/$filename"
              
              echo "Processing fallback for $filename..."
              
              # Create artifact download URLs
              ARTIFACT_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              
              # Replace placeholders with download information and file details
              if [ -f "$golden_file" ] || grep -q "GOLDEN_IMAGE_PLACEHOLDER_${filename}" comparison_report.md; then
                # Add golden image info with download link
                golden_info="**📁 Golden Master:** [\`$filename\`]($ARTIFACT_URL) (Download artifacts to view)"
                if [ -f "$golden_file" ]; then
                  file_size=$(stat -c%s "$golden_file" 2>/dev/null || echo 'Unknown')
                  golden_info="$golden_info<br/>**Size:** ${file_size} bytes"
                fi
                sed -i "s|GOLDEN_IMAGE_PLACEHOLDER_${filename}|$golden_info|g" comparison_report.md
              fi
              
              # Replace new image placeholder with download info
              if [ -f "$output_file" ]; then
                file_size=$(stat -c%s "$output_file" 2>/dev/null || echo 'Unknown')
                dimensions=$(python3 -c "from PIL import Image; img = Image.open('$output_file'); print(f'{img.width}x{img.height}')" 2>/dev/null || echo 'Unknown')
                output_info="**📁 New Output:** [\`$filename\`]($ARTIFACT_URL) (Download artifacts to view)<br/>**Size:** ${file_size} bytes, **Dimensions:** $dimensions"
                sed -i "s|NEW_IMAGE_PLACEHOLDER_${filename}|$output_info|g" comparison_report.md
              fi
              
              # Replace diff image placeholder if it exists
              if [ -f "diffs/diff_$filename" ]; then
                file_size=$(stat -c%s "diffs/diff_$filename" 2>/dev/null || echo 'Unknown')
                diff_info="**📁 Visual Difference:** [\`diff_$filename\`]($ARTIFACT_URL) (Download artifacts to view)<br/>**Size:** ${file_size} bytes"
                sed -i "s|DIFF_IMAGE_PLACEHOLDER_${filename}|$diff_info|g" comparison_report.md
              else
                # Remove diff placeholder if no diff was generated
                sed -i "/DIFF_IMAGE_PLACEHOLDER_${filename}/d" comparison_report.md
              fi
            done
            sed -i 's|IMAGE_EMBEDDING_PLACEHOLDER|## 🖼️ Image Files Available for Download\n\nImages could not be embedded directly in this PR comment. This can happen due to GitHub API limitations or temporary branch creation issues.\n\n📦 **[Download Visual Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**\n\n### Artifact Contents:\n- **`'$OUTPUTS_DIR'/`** - New test images generated by your application\n- **`diffs/`** - Visual difference images highlighting changes\n- **`golden/`** - Golden master reference images\n- **`comparison_report.md`** - This detailed report\n\n> **💡 Tip:** Extract the artifact ZIP file and open the images in your preferred image viewer to review the visual changes.|' comparison_report.md
          fi
        else
          echo "No comparison report found"
        fi
        
        # Debug: Show final report content
        echo ""
        echo "=== Debug: Final Report Content ==="
        if [ -f comparison_report.md ]; then
          echo "Report generated successfully. Length: $(wc -l < comparison_report.md) lines"
          echo ""
          echo "First 50 lines of report:"
          head -50 comparison_report.md
          echo ""
          echo "Checking for any remaining placeholders:"
          if grep -n ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md; then
            echo "❌ Found unreplaced placeholders above"
          else
            echo "✅ No unreplaced placeholders found"
          fi
          echo ""
          echo "Checking for embedded images:"
          if grep -c "!\[.*\](" comparison_report.md; then
            echo "✅ Found $(grep -c "!\[.*\](" comparison_report.md) embedded images"
            grep "!\[.*\](" comparison_report.md | head -3
          else
            echo "❌ No embedded images found"
          fi
        else
          echo "❌ No comparison report found"
        fi
        echo "=================================="
    
    - name: Debug outputs before commenting
      run: |
        echo "=== Debug Step Outputs ==="
        echo "changes_detected: '${{ steps.compare.outputs.changes_detected }}'"
        echo "changed_images: '${{ steps.compare.outputs.changed_images }}'"
        echo "images_committed: '${{ steps.commit_images.outputs.images_committed }}'"
        echo "branch_name: '${{ steps.commit_images.outputs.branch_name }}'"
        echo "========================="
        echo ""
        echo "=== Debug Image Embedding Status ==="
        if [ "${{ steps.commit_images.outputs.images_committed }}" = "true" ]; then
          echo "✅ Images were committed successfully - replacement should happen"
        else
          echo "❌ Images were NOT committed - replacement will be skipped"
          echo "This means the commit images step failed or didn't detect changes to commit"
        fi
        echo ""
        echo "=== Debug Report File Status ==="
        if [ -f comparison_report.md ]; then
          echo "✅ comparison_report.md exists"
          echo "Report size: $(wc -l < comparison_report.md) lines"
          echo "Checking for placeholders in report:"
          if grep -q ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md; then
            echo "✅ Found placeholders in report:"
            grep ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md | head -5
          else
            echo "❌ No placeholders found in report"
          fi
        else
          echo "❌ comparison_report.md does not exist"
        fi
        echo "=================================="

    - name: Comment PR with results
      if: steps.compare.outputs.changes_detected == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('comparison_report.md', 'utf8');
          
          // Check if images were successfully committed
          const imagesCommitted = '${{ steps.commit_images.outputs.images_committed }}' === 'true';
          
          if (!imagesCommitted) {
            // Fail the workflow if images couldn't be embedded
            core.setFailed('Visual regression testing found differences, but images could not be committed for display. This is considered a failure.');
            return;
          }
          
          // Clean up old bot comments first
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComments = comments.data.filter(comment => 
            comment.user.type === 'Bot' && 
            (comment.body.includes('Visual Regression Test Results') ||
             comment.body.includes('Visual tests passed'))
          );
          
          // Delete old bot comments to avoid confusion
          for (const comment of botComments) {
            try {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
              console.log(`Deleted old bot comment: ${comment.id}`);
            } catch (error) {
              console.log(`Failed to delete comment ${comment.id}: ${error.message}`);
            }
          }
          
          // Always create a new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: report
          });
    
    - name: Comment PR with success
      if: steps.compare.outputs.changes_detected == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const report = "✅ **Visual tests passed!** No differences detected.\n\n**Test Run:** " + new Date().toISOString().replace('T', ' ').substr(0, 19) + " UTC";
          
          // Clean up old bot comments first
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComments = comments.data.filter(comment => 
            comment.user.type === 'Bot' && 
            (comment.body.includes('Visual Regression Test Results') ||
             comment.body.includes('Visual tests passed'))
          );
          
          // Delete old bot comments to avoid confusion
          for (const comment of botComments) {
            try {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
              console.log(`Deleted old bot comment: ${comment.id}`);
            } catch (error) {
              console.log(`Failed to delete comment ${comment.id}: ${error.message}`);
            }
          }
          
          // Always create a new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: report
          });

  cleanup-old-branches:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Clean up old visual diff branches
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Get current timestamp (7 days ago)
        CUTOFF_DATE=$(date -d '7 days ago' '+%Y-%m-%d')
        echo "Cleaning up visual diff branches older than: $CUTOFF_DATE"
        
        # Find and delete old visual-diff branches
        git branch -r | grep 'origin/visual-diff-' | while read -r branch; do
          branch_name=${branch#origin/}
          echo "Checking branch: $branch_name"
          
          # Get the last commit date of the branch
          if git show --format="%ci" --no-patch "$branch" > /dev/null 2>&1; then
            BRANCH_DATE=$(git show --format="%ci" --no-patch "$branch" | cut -d' ' -f1)
            echo "Branch date: $BRANCH_DATE"
            
            # Compare dates (if branch is older than cutoff, delete it)
            if [[ "$BRANCH_DATE" < "$CUTOFF_DATE" ]]; then
              echo "Deleting old branch: $branch_name"
              git push origin --delete "$branch_name" || echo "Failed to delete $branch_name (may not exist)"
            else
              echo "Keeping recent branch: $branch_name"
            fi
          else
            echo "Could not get date for branch: $branch_name"
          fi
        done
