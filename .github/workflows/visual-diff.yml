name: Visual Diff and PR Report

on:
  workflow_call:
    inputs:
      outputs_directory:
        description: 'Directory containing output images to compare'
        required: false
        default: 'outputs'
        type: string
      artifact_name:
        description: 'Name of artifact to download containing test images (optional)'
        required: false
        type: string
      test_mode:
        description: 'Enable test mode to generate sample images if none exist (for testing only)'
        required: false
        default: false
        type: boolean
      artifact_suffix:
        description: 'Optional suffix to make artifact names unique when running multiple instances'
        required: false
        type: string
      pr_number:
        description: 'Pull request number for creating comments (required when called via workflow_call)'
        required: false
        type: number

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read  # Needed for artifact access

jobs:
  visual-diff:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      with:
        lfs: true
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install NVIDIA FLIP for image comparison
      run: |
        # Install NVIDIA FLIP from PyPI for high-fidelity image comparison
        pip install flip-evaluator
        flip --help
    
    - name: Create necessary directories
      run: |
        mkdir -p diffs
        mkdir -p golden
    
    - name: List available artifacts (debug)
      if: ${{ inputs.artifact_name != '' && inputs.artifact_name != null }}
      run: |
        echo "=== Artifact Debug Information ==="
        echo "Requested artifact name: ${{ inputs.artifact_name }}"
        echo "Output directory: ${{ inputs.outputs_directory || 'outputs' }}"
        echo "Workflow context:"
        echo "  github.repository: ${{ github.repository }}"
        echo "  github.run_id: ${{ github.run_id }}"
        echo "  github.run_number: ${{ github.run_number }}"
        echo "==================================="
    
    - name: Download artifact containing test images
      if: ${{ inputs.artifact_name != '' && inputs.artifact_name != null }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ inputs.outputs_directory || 'outputs' }}
      continue-on-error: false
      # Add a small retry mechanism for potential timing issues
      timeout-minutes: 5
    
    - name: Verify artifact download
      if: ${{ inputs.artifact_name != '' && inputs.artifact_name != null }}
      run: |
        set -euo pipefail
        
        OUTPUTS_DIR="${{ inputs.outputs_directory || 'outputs' }}"
        
        echo "=== Artifact Download Verification ==="
        echo "Artifact name: ${{ inputs.artifact_name }}"
        echo "Download path: $OUTPUTS_DIR"
        echo "Directory contents:"
        ls -la "$OUTPUTS_DIR/" || echo "Directory not found"
        echo "====================================="
        
        # Check if any files were downloaded
        if [ ! -d "$OUTPUTS_DIR" ] || [ -z "$(ls -A "$OUTPUTS_DIR/" 2>/dev/null)" ]; then
          echo "❌ Artifact download failed - no files found in $OUTPUTS_DIR/"
          echo "This could indicate:"
          echo "  1. The artifact '${{ inputs.artifact_name }}' doesn't exist"
          echo "  2. The artifact is empty"
          echo "  3. Permission issues accessing the artifact"
          echo "  4. Timing issues (artifact not ready yet)"
          exit 1
        else
          echo "✅ Artifact download successful - found files in $OUTPUTS_DIR/"
        fi
    
    - name: Setup Python for test mode (if needed)
      if: ${{ inputs.test_mode && !inputs.artifact_name }}
      uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
      with:
        python-version: '3.x'
    
    - name: Install Python dependencies for test mode
      if: ${{ inputs.test_mode && !inputs.artifact_name }}
      run: |
        python -m pip install --upgrade pip
        pip install Pillow>=10.0.0
    
    - name: Generate test images for test mode
      if: ${{ inputs.test_mode && !inputs.artifact_name }}
      run: |
        export TEST_SCENARIO="baseline"
        echo "🧪 TEST MODE: Generating sample test images for backward compatibility testing..."
        
        # Create a simple test image generator
        cat > generate_simple_test_images.py << 'EOF'
        import os
        from PIL import Image, ImageDraw, ImageFont
        import random
        
        def create_test_image(filename, text, width=400, height=300):
            # Set seed for reproducible images
            random.seed(42)
            
            image = Image.new('RGB', (width, height), (255, 255, 255))
            draw = ImageDraw.Draw(image)
            
            # Draw simple shapes
            draw.rectangle([50, 50, width-50, height-50], outline=(100, 150, 200), width=3)
            draw.ellipse([100, 100, width-100, height-100], outline=(100, 150, 200), width=2)
            
            # Add text
            font = ImageFont.load_default()
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            x = (width - text_width) // 2
            y = (height - text_height) // 2
            draw.text((x, y), text, fill=(0, 0, 0), font=font)
            
            # Add some random elements
            for i in range(3):
                x1, y1 = random.randint(0, width), random.randint(0, height)
                x2, y2 = x1 + random.randint(10, 30), y1 + random.randint(10, 30)
                draw.rectangle([x1, y1, x2, y2], fill=(100, 150, 200))
            
            return image
        
        # Ensure outputs directory exists
        outputs_dir = '${{ inputs.outputs_directory || 'outputs' }}'
        os.makedirs(outputs_dir, exist_ok=True)
        
        # Generate test images
        test_cases = [
            ('ui-main-screen.png', 'Main Screen UI'),
            ('ui-settings-dialog.png', 'Settings Dialog'),
            ('ui-dashboard.png', 'Dashboard View')
        ]
        
        for filename, text in test_cases:
            print(f"Generating test image: {filename}")
            image = create_test_image(filename, text)
            output_path = os.path.join(outputs_dir, filename)
            image.save(output_path)
            print(f"Saved {output_path}")
        
        print("✅ Test images generated successfully")
        EOF
        
        # Run the test image generator
        python3 generate_simple_test_images.py
        
        # Verify images were created
        ls -la ${{ inputs.outputs_directory || 'outputs' }}/
    
    - name: Check for existing test images
      id: check_images
      run: |
        set -euo pipefail  # Enable strict error handling
        
        # Use configurable outputs directory with input validation
        OUTPUTS_DIR="${{ inputs.outputs_directory || 'outputs' }}"
        
        # Validate outputs directory parameter to prevent path injection
        if [[ ! "$OUTPUTS_DIR" =~ ^[a-zA-Z0-9_/-]+$ ]]; then
          echo "❌ Invalid outputs directory name: $OUTPUTS_DIR"
          echo "Directory name must contain only alphanumeric characters, underscores, hyphens, and forward slashes"
          exit 1
        fi
        
        # Prevent directory traversal attacks
        if [[ "$OUTPUTS_DIR" =~ \.\. ]]; then
          echo "❌ Directory traversal not allowed in outputs directory: $OUTPUTS_DIR"
          exit 1
        fi
        
        # Check if test images exist in the outputs directory
        if [ ! -d "$OUTPUTS_DIR" ] || [ -z "$(ls -A $OUTPUTS_DIR/ 2>/dev/null)" ]; then
          echo "❌ No test images found in $OUTPUTS_DIR/ directory"
          echo "The visual diff job expects test images to already exist in $OUTPUTS_DIR/"
          echo "These should be generated by your application's CI pipeline, not by this workflow"
          echo ""
          echo "For testing the visual diff system itself, use the separate test-visual-diff workflow"
          exit 1
        fi
        
        # Count and list available images
        IMAGE_COUNT=$(ls -1 $OUTPUTS_DIR/*.png 2>/dev/null | wc -l)
        echo "Found $IMAGE_COUNT test images to compare:"
        ls -la $OUTPUTS_DIR/
        
        echo "image_count=$IMAGE_COUNT" >> $GITHUB_OUTPUT
        echo "outputs_dir=$OUTPUTS_DIR" >> $GITHUB_OUTPUT
    
    - name: Compare images and generate diffs
      id: compare
      continue-on-error: true
      run: |
        # Create error reporting helper function
        create_error_report() {
          local error_title="$1"
          local error_description="$2"
          local troubleshooting_steps="$3"
          
          # Create a complete, clean error report
          echo "# ❌ Visual Regression Test Failed" > comparison_report.md
          echo "" >> comparison_report.md
          echo "**Error:** $error_description" >> comparison_report.md
          echo "" >> comparison_report.md
          echo "**Test Run:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> comparison_report.md
          echo "" >> comparison_report.md
          echo "## Error Details" >> comparison_report.md
          echo "" >> comparison_report.md
          echo "$error_title" >> comparison_report.md
          echo "" >> comparison_report.md
          echo "### Troubleshooting Steps:" >> comparison_report.md
          echo -e "$troubleshooting_steps" >> comparison_report.md
          echo "" >> comparison_report.md
          echo "**Action Required:** Please review the error details above and fix any underlying issues before retrying." >> comparison_report.md
          echo "" >> comparison_report.md
          echo "📦 **[Download Workflow Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**" >> comparison_report.md
          
          # Ensure the file is fully written
          sync
          echo "✅ Complete error report created: comparison_report.md"
        }
        
        # Disable strict error handling initially to control error flow
        set -uo pipefail
        
        # Use configurable outputs directory
        OUTPUTS_DIR="${{ steps.check_images.outputs.outputs_dir }}"
        
        # Initialize variables
        CHANGED_IMAGES=""
        CHANGES_DETECTED=false
        
        echo "=== Starting visual regression comparison ==="
        echo "Output directory: $OUTPUTS_DIR"
        
        # Ensure FLIP is available
        if ! command -v flip &> /dev/null; then
          echo "❌ FLIP command not found. Installing FLIP..."
          if ! pip install flip-evaluator; then
            echo "❌ Failed to install FLIP. Cannot proceed with image comparison."
            echo "changes_detected=error" >> $GITHUB_OUTPUT
            echo "changed_images=" >> $GITHUB_OUTPUT
            
            create_error_report "FLIP Installation Failed" \
              "FLIP tool installation failed. Cannot proceed with image comparison." \
              "1. Check that the system has Python and pip available\n2. Verify network connectivity for package installation\n3. Check for any dependency conflicts\n4. Ensure pip has sufficient permissions to install packages"
            
            exit 1
          fi
          echo "✅ FLIP installed successfully"
        fi
        
        # Verify outputs directory exists and has images
        if [ ! -d "$OUTPUTS_DIR" ] || [ -z "$(ls -A "$OUTPUTS_DIR"/*.png 2>/dev/null)" ]; then
          echo "❌ No output images found in $OUTPUTS_DIR/ directory"
          echo "changes_detected=error" >> $GITHUB_OUTPUT
          echo "changed_images=" >> $GITHUB_OUTPUT
          
          create_error_report "No Output Images Found" \
            "No output images found in $OUTPUTS_DIR/ directory." \
            "1. Verify that your application generates images in the $OUTPUTS_DIR/ directory\n2. Check that the outputs_directory parameter is set correctly\n3. Ensure that test images are committed to the repository\n4. For workflow_call, verify that artifacts are uploaded correctly\n5. Check the workflow logs to see if image generation failed"
          
          exit 1
        fi
        
        echo "✅ Found images in $OUTPUTS_DIR/, proceeding with comparison"
        
        # Set up error trap to ensure clean error reporting
        trap 'handle_unexpected_exit $?' EXIT
        handle_unexpected_exit() {
          local exit_code=$1
          if [ $exit_code -ne 0 ] && [ ! -f comparison_report.md ]; then
            echo "⚠️ Unexpected exit detected, creating emergency error report"
            create_error_report "Unexpected Script Exit" \
              "The comparison script exited unexpectedly with code $exit_code." \
              "1. Check the workflow logs for specific error messages\n2. Verify all required dependencies are available\n3. Ensure sufficient disk space and memory\n4. Check for file permission issues\n5. Retry the workflow"
            echo "changes_detected=error" >> $GITHUB_OUTPUT 2>/dev/null || true
            echo "changed_images=" >> $GITHUB_OUTPUT 2>/dev/null || true
          fi
        }
        
        # Re-enable strict error handling for the main processing
        set -euo pipefail
        
        # Create comparison report with summary table
        echo "# Visual Regression Test Results" > comparison_report.md
        echo "" >> comparison_report.md
        echo "**Test Run:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> comparison_report.md
        echo "" >> comparison_report.md
        echo "## Summary" >> comparison_report.md
        echo "" >> comparison_report.md
        echo "| File | Status | FLIP Mean Error | Result |" >> comparison_report.md
        echo "|------|--------|-----------------|--------|" >> comparison_report.md
        
        # Initialize summary data and detailed results
        summary_data=""
        
        # Initialize detailed results section
        echo "" > detailed_results.md
        echo "## Detailed Results" >> detailed_results.md
        echo "" >> detailed_results.md
        
        # Process each output image
        for output_file in "$OUTPUTS_DIR"/*.png; do
          if [ ! -f "$output_file" ]; then
            echo "No output images found"
            continue
          fi
          
          filename=$(basename "$output_file")
          golden_file="golden/$filename"
          diff_file="diffs/diff_$filename"
          
          echo "Processing $filename..."
          
          # Check if golden image exists
          if [ ! -f "$golden_file" ]; then
            # New image - no golden master exists
            summary_data="$summary_data| \`$filename\` | 🆕 New | N/A | Needs acceptance |\n"
            
            # Add detailed analysis for new image
            echo "### 🆕 $filename (New Image)" >> detailed_results.md
            echo "" >> detailed_results.md
            echo "**Status:** New image detected - no golden master exists" >> detailed_results.md
            echo "**Action Required:** This image needs to be accepted as a new golden master" >> detailed_results.md
            echo "**File Size:** $(stat -c%s "$output_file" 2>/dev/null || echo 'Unknown') bytes" >> detailed_results.md
            
            # Get image dimensions using Python (more reliable than identify)
            dimensions=$(python3 -c "from PIL import Image; img = Image.open('$output_file'); print(f'{img.width}x{img.height}')" 2>/dev/null || echo 'Unknown')
            echo "**Dimensions:** $dimensions" >> detailed_results.md
            echo "" >> detailed_results.md
            
            # Add image placeholder for new images
            echo "**New Output (Actual):**" >> detailed_results.md
            echo "NEW_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
            echo "" >> detailed_results.md
            
            echo "To accept this new image: \`/accept-image $filename\`" >> detailed_results.md
            echo "" >> detailed_results.md
            echo "---" >> detailed_results.md
            echo "" >> detailed_results.md
            
            CHANGED_IMAGES="$CHANGED_IMAGES $filename"
            CHANGES_DETECTED=true
          else
            # Fetch the specific golden LFS file
            git lfs pull --include "$golden_file" || echo "Warning: Could not pull LFS file $golden_file"
            
            # Compare using NVIDIA FLIP for high-fidelity comparison
            # FLIP outputs difference metrics and generates diff images
            basename_no_ext=$(basename "$filename" .png)
            diff_basename="diff_${basename_no_ext}"
            stats_file="diffs/${diff_basename}_stats.txt"
            
            # Debug: Print the command that will be executed
            echo "Variables:"
            echo "  golden_file: '$golden_file'"
            echo "  output_file: '$output_file'"
            echo "  diff_basename: '$diff_basename'"
            echo "  stats_file: '$stats_file'"
            echo "Golden file exists: $([ -f "$golden_file" ] && echo 'YES' || echo 'NO')"
            echo "Output file exists: $([ -f "$output_file" ] && echo 'YES' || echo 'NO')"
            echo ""
            
            # Ensure both files exist before running FLIP
            if [ ! -f "$golden_file" ]; then
              echo "Error: Golden file does not exist: $golden_file"
              summary_data="$summary_data| \`$filename\` | ❌ Error | N/A | Golden file missing |\n"
              continue
            fi
            if [ ! -f "$output_file" ]; then
              echo "Error: Output file does not exist: $output_file"
              summary_data="$summary_data| \`$filename\` | ❌ Error | N/A | Output file missing |\n"
              continue
            fi
            
            # Use enhanced FLIP parameters for comprehensive statistics
            echo "Running FLIP command: flip -r '$golden_file' -t '$output_file' -d diffs -b '$diff_basename' -v 2 -txt"
            
            # Run FLIP with enhanced verbosity and text output for detailed statistics
            flip_output=$(flip -r "$golden_file" -t "$output_file" -d diffs -b "$diff_basename" -v 2 -txt 2>&1) || flip_exit_code=$?
            
            # Default to success if flip_exit_code is not set
            flip_exit_code=${flip_exit_code:-0}
            
            echo "FLIP exit code: $flip_exit_code"
            echo "FLIP output: $flip_output"
            
            # Check if FLIP command succeeded
            if [ $flip_exit_code -ne 0 ]; then
              echo "Error: FLIP command failed with exit code $flip_exit_code"
              echo "Error output: $flip_output"
              summary_data="$summary_data| \`$filename\` | ❌ Error | N/A | FLIP failed |\n"
              
              # Add detailed error information
              echo "### ❌ $filename (Comparison Error)" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Status:** FLIP comparison failed" >> detailed_results.md
              echo "**Error Code:** $flip_exit_code" >> detailed_results.md
              echo "**Error Output:**" >> detailed_results.md
              echo "\`\`\`" >> detailed_results.md
              echo "$flip_output" >> detailed_results.md
              echo "\`\`\`" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "---" >> detailed_results.md
              echo "" >> detailed_results.md
              continue
            fi
            
            # Extract comprehensive FLIP statistics from the output
            mean_error=$(echo "$flip_output" | grep "Mean:" | awk '{print $2}')
            median_error=$(echo "$flip_output" | grep "Weighted median:" | awk '{print $3}')
            q1_error=$(echo "$flip_output" | grep "1st weighted quartile:" | awk '{print $4}')
            q3_error=$(echo "$flip_output" | grep "3rd weighted quartile:" | awk '{print $4}')
            min_error=$(echo "$flip_output" | grep "Min:" | awk '{print $2}')
            max_error=$(echo "$flip_output" | grep "Max:" | awk '{print $2}')
            ppd=$(echo "$flip_output" | grep "Pixels per degree:" | awk '{print $4}')
            eval_time=$(echo "$flip_output" | grep "Evaluation time:" | awk '{print $3}')
            
            # Check if there's any meaningful difference (FLIP error > 0.001)
            # Using awk for floating point comparison
            is_different=$(echo "$mean_error" | awk '{if ($1 > 0.001) print "yes"; else print "no"}')
            
            # Add detailed analysis section for this image
            if [ "$is_different" = "yes" ]; then
              summary_data="$summary_data| \`$filename\` | 🔄 Changed | $mean_error | Needs review |\n"
              CHANGED_IMAGES="$CHANGED_IMAGES $filename"
              CHANGES_DETECTED=true
              
              # Add comprehensive detailed analysis for changed image
              echo "### 🔄 $filename (Changed)" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Status:** Visual differences detected" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**FLIP Analysis Results:**" >> detailed_results.md
              echo "- **Mean Error:** ${mean_error:-'N/A'}" >> detailed_results.md
              echo "- **Median Error:** ${median_error:-'N/A'}" >> detailed_results.md
              echo "- **1st Quartile:** ${q1_error:-'N/A'}" >> detailed_results.md
              echo "- **3rd Quartile:** ${q3_error:-'N/A'}" >> detailed_results.md
              echo "- **Min Error:** ${min_error:-'N/A'}" >> detailed_results.md
              echo "- **Max Error:** ${max_error:-'N/A'}" >> detailed_results.md
              echo "- **Pixels per Degree:** ${ppd:-'N/A'}" >> detailed_results.md
              echo "- **Evaluation Time:** ${eval_time:-'N/A'}" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Interpretation:**" >> detailed_results.md
              if [ -n "$mean_error" ]; then
                mean_threshold=$(echo "$mean_error" | awk '{
                  if ($1 > 0.1) print "High - significant visual differences"
                  else if ($1 > 0.01) print "Medium - noticeable differences"
                  else print "Low - subtle differences"
                }')
                echo "- Mean error level: $mean_threshold" >> detailed_results.md
              fi
              echo "" >> detailed_results.md
              
              # Add image placeholders for changed images
              echo "**Golden Master (Expected):**" >> detailed_results.md
              echo "GOLDEN_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**New Output (Actual):**" >> detailed_results.md
              echo "NEW_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Visual Difference (Highlighted Changes):**" >> detailed_results.md
              echo "DIFF_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
              echo "" >> detailed_results.md
              
              echo "**Action Required:** Review the visual differences and accept if intentional" >> detailed_results.md
              echo "To accept this change: \`/accept-image $filename\`" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "---" >> detailed_results.md
              echo "" >> detailed_results.md
            else
              summary_data="$summary_data| \`$filename\` | ✅ Passed | $mean_error | No changes |\n"
              
              # Add detailed analysis for passed image
              echo "### ✅ $filename (Passed)" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Status:** No significant visual differences detected" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**FLIP Analysis Results:**" >> detailed_results.md
              echo "- **Mean Error:** ${mean_error:-'N/A'} (below significance threshold)" >> detailed_results.md
              echo "- **Median Error:** ${median_error:-'N/A'}" >> detailed_results.md
              echo "- **Min Error:** ${min_error:-'N/A'}" >> detailed_results.md
              echo "- **Max Error:** ${max_error:-'N/A'}" >> detailed_results.md
              echo "- **Pixels per Degree:** ${ppd:-'N/A'}" >> detailed_results.md
              echo "- **Evaluation Time:** ${eval_time:-'N/A'}" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**Result:** Image matches golden master within acceptable tolerance" >> detailed_results.md
              echo "" >> detailed_results.md
              
              # Add image placeholders for passed images (still useful to show what matched)
              echo "**Golden Master (Expected):**" >> detailed_results.md
              echo "GOLDEN_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
              echo "" >> detailed_results.md
              echo "**New Output (Actual):**" >> detailed_results.md
              echo "NEW_IMAGE_PLACEHOLDER_${filename}" >> detailed_results.md
              echo "" >> detailed_results.md
              
              echo "---" >> detailed_results.md
              echo "" >> detailed_results.md
            fi
          fi
        done
        
        # Add summary data to report
        echo -e "$summary_data" >> comparison_report.md
        echo "" >> comparison_report.md
        
        # Append detailed results to the main report
        cat detailed_results.md >> comparison_report.md
        
        # Add image embedding placeholder for later replacement
        echo "IMAGE_EMBEDDING_PLACEHOLDER" >> comparison_report.md
        
        # Set outputs for next steps
        echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT
        echo "changed_images=$CHANGED_IMAGES" >> $GITHUB_OUTPUT
        
        # If no changes, add a success message
        if [ "$CHANGES_DETECTED" = "false" ]; then
          echo "✅ **All visual tests passed!** No differences detected." >> comparison_report.md
        fi
        
        # Ensure all file writes are completed and synced to disk
        sync
        
        # Clear the error trap since we completed successfully  
        trap - EXIT
        
        # Verify that comparison_report.md was created and is readable
        if [ ! -f comparison_report.md ]; then
          echo "❌ ERROR: comparison_report.md was not created!"
          echo "changes_detected=error" >> $GITHUB_OUTPUT
          echo "changed_images=" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Double-check the file is readable and not empty
        if [ ! -s comparison_report.md ]; then
          echo "❌ ERROR: comparison_report.md is empty!"
          echo "changes_detected=error" >> $GITHUB_OUTPUT
          echo "changed_images=" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "✅ Comparison step completed successfully"
        echo "📄 Report file size: $(wc -c < comparison_report.md) bytes"
        echo "📝 Report line count: $(wc -l < comparison_report.md) lines"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: visual-test-results-${{ github.event.pull_request.number || github.run_number }}${{ inputs.artifact_suffix && format('-{0}', inputs.artifact_suffix) || '' }}
        path: |
          ${{ steps.check_images.outputs.outputs_dir }}/
          diffs/
          golden/
          comparison_report.md
        retention-days: 30
    
    - name: Commit images to temporary branch for display
      id: commit_images
      continue-on-error: true
      run: |
        set -euo pipefail  # Enable strict error handling
        
        # Use configurable outputs directory
        OUTPUTS_DIR="${{ steps.check_images.outputs.outputs_dir }}"
        
        # Debug: Show current state before committing
        echo "=== Debug: Pre-commit state ==="
        echo "PWD: $(pwd)"
        echo "Current branch: $(git branch --show-current)"
        echo "Files in $OUTPUTS_DIR/:"
        ls -la "$OUTPUTS_DIR/" || echo "$OUTPUTS_DIR/ directory not found"
        echo "Files in diffs/:"
        ls -la diffs/ || echo "diffs/ directory not found"
        echo "Files in golden/:"
        ls -la golden/ || echo "golden/ directory not found"
        echo "=============================================="
        
        # Create a unique branch name for this PR and run with timestamp to avoid conflicts
        TIMESTAMP=$(date +%s)
        BRANCH_NAME="visual-diff-pr-${{ github.event.pull_request.number || 'manual' }}-run-${{ github.run_id }}-${TIMESTAMP}${{ inputs.artifact_suffix && format('-{0}', inputs.artifact_suffix) || '' }}"
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        
        # Store current branch/commit for restoration
        ORIGINAL_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        ORIGINAL_COMMIT=$(git rev-parse HEAD)
        
        echo "=== Debug: Branch info ==="
        echo "Original branch: $ORIGINAL_BRANCH"
        echo "Original commit: $ORIGINAL_COMMIT"
        echo "New branch will be: $BRANCH_NAME"
        echo "=========================="
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create and switch to the temporary branch
        echo "Creating and switching to branch: $BRANCH_NAME"
        if ! git checkout -b "$BRANCH_NAME"; then
          echo "❌ Failed to create branch $BRANCH_NAME"
          echo "images_committed=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Simplify: Remove .gitattributes and .gitignore to allow all files to be committed normally
        echo "=== Debug: Disabling LFS and gitignore in temporary branch ==="
        rm -f .gitattributes .gitignore
        
        # Commit the removal first to ensure clean state
        git add -A
        git commit -m "Remove LFS tracking and gitignore for image display branch" --allow-empty
        echo "✅ LFS tracking and gitignore disabled in temporary branch"
        
        # Copy golden images ensuring they are regular binary files
        echo "=== Debug: Setting up golden images in temporary branch ==="
        if [ -d "golden" ]; then
          # Check if golden images are already binary (not LFS pointers)
          for golden_file in golden/*.png golden/*.jpg golden/*.jpeg 2>/dev/null; do
            if [ -f "$golden_file" ]; then
              filename=$(basename "$golden_file")
              echo "Checking golden image: $filename"
              
              # Check if file is actually binary image data
              if file "$golden_file" | grep -q "PNG image data\|JPEG image data"; then
                echo "✅ $filename is already binary image data"
              else
                echo "⚠️ $filename might be LFS pointer, attempting to get binary data"
                # Try to get binary data from LFS
                if git lfs smudge < "$golden_file" > "golden/${filename}.tmp" 2>/dev/null; then
                  if file "golden/${filename}.tmp" | grep -q "PNG image data\|JPEG image data"; then
                    mv "golden/${filename}.tmp" "$golden_file"
                    echo "✅ Successfully converted $filename from LFS to binary"
                  else
                    rm -f "golden/${filename}.tmp"
                    echo "❌ Could not extract binary data for $filename"
                  fi
                else
                  rm -f "golden/${filename}.tmp"
                  echo "❌ LFS smudge failed for $filename"
                fi
              fi
            fi
          done
        fi
        
        # Add all generated images
        echo "=== Debug: Adding files to git ==="
        
        # Add outputs directory if it exists
        if [ -d "$OUTPUTS_DIR" ] && [ -n "$(ls -A "$OUTPUTS_DIR"/*.png 2>/dev/null)" ]; then
          echo "Adding $OUTPUTS_DIR/ directory..."
          git add "$OUTPUTS_DIR/"
        fi
        
        # Add diffs directory if it exists  
        if [ -d "diffs" ] && [ -n "$(ls -A diffs/ 2>/dev/null)" ]; then
          echo "Adding diffs/ directory..."
          git add diffs/
        fi
        
        # Add golden directory
        if [ -d "golden" ] && [ -n "$(ls -A golden/ 2>/dev/null)" ]; then
          echo "Adding golden/ directory..."
          git add golden/
        fi
        
        echo "Git status after adding:"
        git status --porcelain
        
        # Commit if there are changes
        if ! git diff --cached --quiet; then
          echo "=== Debug: Changes detected, committing ==="
          echo "Files to be committed:"
          git diff --cached --name-only
          
          git commit -m "Temporary visual diff images for PR #${{ github.event.pull_request.number || github.run_number }}"
          
          echo "Commit successful, pushing to origin..."
          # Push the branch with retry logic
          PUSH_SUCCESS=false
          MAX_ATTEMPTS=5
          for attempt in $(seq 1 $MAX_ATTEMPTS); do
            echo "Push attempt $attempt of $MAX_ATTEMPTS..."
            if timeout 120 git push origin "$BRANCH_NAME" 2>&1; then
              PUSH_SUCCESS=true
              echo "✅ Push successful on attempt $attempt"
              break
            else
              echo "❌ Push failed on attempt $attempt"
              if [ $attempt -lt $MAX_ATTEMPTS ]; then
                echo "Waiting before retry..."
                sleep $((attempt * 3))
              fi
            fi
          done
          
          if [ "$PUSH_SUCCESS" = "true" ]; then
            # Wait a moment for GitHub to process the push
            echo "Waiting for GitHub to process the push..."
            sleep 10
            
            # Verify that at least one image is accessible via HTTP
            REPO_URL="https://raw.githubusercontent.com/${{ github.repository }}/$BRANCH_NAME"
            VERIFICATION_SUCCESS=false
            
            echo "=== Debug: Verifying image accessibility ==="
            for output_file in $OUTPUTS_DIR/*.png 2>/dev/null; do
              if [ -f "$output_file" ]; then
                filename=$(basename "$output_file")
                test_url="$REPO_URL/$OUTPUTS_DIR/$filename"
                echo "Testing URL: $test_url"
                
                # Use curl to verify the image is accessible
                if curl -s -f -I "$test_url" >/dev/null 2>&1; then
                  echo "✅ Image verified accessible: $filename"
                  VERIFICATION_SUCCESS=true
                  break
                else
                  echo "❌ Image not yet accessible: $filename"
                fi
              fi
            done
            
            if [ "$VERIFICATION_SUCCESS" = "true" ]; then
              echo "images_committed=true" >> $GITHUB_OUTPUT
              echo "✅ Successfully committed and verified images in branch: $BRANCH_NAME"
            else
              echo "images_committed=false" >> $GITHUB_OUTPUT
              echo "❌ Images were committed but are not yet accessible via HTTP"
              echo "This may be due to GitHub CDN propagation delays"
            fi
          else
            echo "images_committed=false" >> $GITHUB_OUTPUT
            echo "❌ Failed to push branch after $MAX_ATTEMPTS attempts"
          fi
        else
          echo "images_committed=false" >> $GITHUB_OUTPUT
          echo "❌ No changes to commit"
        fi
        
        # Return to original branch
        echo "Returning to original branch: $ORIGINAL_BRANCH"
        git checkout "$ORIGINAL_BRANCH" || echo "Warning: could not return to original branch"
    
    - name: Return to original branch
      if: always()
      run: |
        # Ensure we're back on the original branch for any subsequent steps
        ORIGINAL_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null || echo "HEAD")
        if [[ "$ORIGINAL_BRANCH" == visual-diff-* ]]; then
          git checkout ${{ github.head_ref || github.ref_name || 'main' }}
        fi

    - name: Generate comprehensive comparison report with embedded images
      id: generate_report
      continue-on-error: true
      run: |
        set -euo pipefail  # Enable strict error handling
        
        # Use configurable outputs directory
        OUTPUTS_DIR="${{ steps.check_images.outputs.outputs_dir }}"
        
        # Read the current comparison report
        if [ -f comparison_report.md ]; then
          BRANCH_NAME="${{ steps.commit_images.outputs.branch_name }}"
          
          echo "=== Debug: Replacement Path Decision ==="
          echo "images_committed value: '${{ steps.commit_images.outputs.images_committed }}'"
          echo "branch_name value: '${{ steps.commit_images.outputs.branch_name }}'"
          echo "=================================="
          
          if [ "${{ steps.commit_images.outputs.images_committed }}" = "true" ]; then
            # Update the comparison report with embedded GitHub raw URLs
            REPO_URL="https://raw.githubusercontent.com/${{ github.repository }}/$BRANCH_NAME"
            echo "=== Image Embedding: ENABLED ==="
            echo "Using repository URL: $REPO_URL"
            echo "Branch name: $BRANCH_NAME"
            
            # Wait a bit more for GitHub CDN to propagate
            echo "Waiting for GitHub CDN propagation..."
            sleep 15
            
            # Process each output image to replace placeholders with actual image URLs
            image_files_found=false
            
            # First approach: Process files from outputs directory
            echo "=== Processing files from outputs directory ==="
            if [ -d "$OUTPUTS_DIR" ] && [ -n "$(ls -A "$OUTPUTS_DIR"/*.png 2>/dev/null)" ]; then
              for output_file in "$OUTPUTS_DIR"/*.png; do
                if [ -f "$output_file" ]; then
                  image_files_found=true
                  filename=$(basename "$output_file")
                  golden_file="golden/$filename"
                  
                  echo "=== Processing image embedding for: $filename ==="
                  
                  # Debug: Check what placeholders exist for this filename
                  echo "Checking for placeholders for $filename:"
                  grep -n ".*_IMAGE_PLACEHOLDER_${filename}" comparison_report.md || echo "No placeholders found for $filename"
                  
                  # Define image URLs
                  golden_url="$REPO_URL/golden/$filename"
                  output_url="$REPO_URL/$OUTPUTS_DIR/$filename"
                  diff_url="$REPO_URL/diffs/diff_$filename"
                  
                  # Verify URLs are accessible before using them
                  echo "=== Verifying image URLs for $filename ==="
                  output_url_valid=false
                  golden_url_valid=false
                  diff_url_valid=false
                  
                  # Test output URL
                  if curl -s -f -I "$output_url" >/dev/null 2>&1; then
                    echo "✅ Output URL verified: $output_url"
                    output_url_valid=true
                  else
                    echo "❌ Output URL failed: $output_url"
                  fi
                  
                  # Test golden URL (if golden file exists)
                  if [ -f "$golden_file" ]; then
                    if curl -s -f -I "$golden_url" >/dev/null 2>&1; then
                      echo "✅ Golden URL verified: $golden_url"
                      golden_url_valid=true
                    else
                      echo "❌ Golden URL failed: $golden_url"
                    fi
                  fi
                  
                  # Test diff URL (if diff file exists)
                  if [ -f "diffs/diff_$filename" ]; then
                    if curl -s -f -I "$diff_url" >/dev/null 2>&1; then
                      echo "✅ Diff URL verified: $diff_url"
                      diff_url_valid=true
                    else
                      echo "❌ Diff URL failed: $diff_url"
                    fi
                  fi
                  
                  # Debug: Show placeholder count before replacement
                  echo "Before replacement:"
                  grep -c ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md || echo "0"
                  
                  # Replace placeholders with actual image markdown (only if URLs are verified)
                  # For golden images (if they exist and URL is valid)
                  if [ -f "$golden_file" ] || grep -q "GOLDEN_IMAGE_PLACEHOLDER_${filename}" comparison_report.md; then
                    if [ "$golden_url_valid" = "true" ]; then
                      echo "  Replacing GOLDEN_IMAGE_PLACEHOLDER_${filename} with verified URL: $golden_url"
                      sed -i 's|GOLDEN_IMAGE_PLACEHOLDER_'"${filename}"'|![Golden Master]('"$golden_url"')|g' comparison_report.md
                    else
                      echo "  Replacing GOLDEN_IMAGE_PLACEHOLDER_${filename} with download fallback (URL not verified)"
                      sed -i 's|GOLDEN_IMAGE_PLACEHOLDER_'"${filename}"'|**📁 Golden Master:** [`'"${filename}"'`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) (Download artifacts to view)|g' comparison_report.md
                    fi
                  fi
                  
                  # For new/output images
                  if [ "$output_url_valid" = "true" ]; then
                    echo "  Replacing NEW_IMAGE_PLACEHOLDER_${filename} with verified URL: $output_url"
                    sed -i 's|NEW_IMAGE_PLACEHOLDER_'"${filename}"'|![New Output]('"$output_url"')|g' comparison_report.md
                  else
                    echo "  Replacing NEW_IMAGE_PLACEHOLDER_${filename} with download fallback (URL not verified)"
                    sed -i 's|NEW_IMAGE_PLACEHOLDER_'"${filename}"'|**📁 New Output:** [`'"${filename}"'`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) (Download artifacts to view)|g' comparison_report.md
                  fi
                  
                  # For diff images (only if it was generated and URL is valid)
                  if [ -f "diffs/diff_$filename" ]; then
                    if [ "$diff_url_valid" = "true" ]; then
                      echo "  Replacing DIFF_IMAGE_PLACEHOLDER_${filename} with verified URL: $diff_url"
                      sed -i 's|DIFF_IMAGE_PLACEHOLDER_'"${filename}"'|![Visual Difference]('"$diff_url"')|g' comparison_report.md
                    else
                      echo "  Replacing DIFF_IMAGE_PLACEHOLDER_${filename} with download fallback (URL not verified)"
                      sed -i 's|DIFF_IMAGE_PLACEHOLDER_'"${filename}"'|**📁 Visual Difference:** [`diff_'"${filename}"'`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) (Download artifacts to view)|g' comparison_report.md
                    fi
                  else
                    # Remove diff placeholder if no diff was generated
                    echo "  Removing DIFF_IMAGE_PLACEHOLDER_${filename} (no diff generated)"
                    sed -i "/DIFF_IMAGE_PLACEHOLDER_${filename}/d" comparison_report.md
                  fi
                  
                  # Debug: Show placeholder count after replacement
                  echo "After replacement:"
                  grep -c ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md || echo "0"
                fi
              done
            fi
            
            # Second approach: If no files found in outputs dir, extract from placeholders
            if [ "$image_files_found" = "false" ]; then
              echo "=== No files found in outputs directory, processing placeholders directly ==="
              
              # Extract all unique filenames from placeholders in the report
              placeholder_files=$(grep -o ".*_IMAGE_PLACEHOLDER_[^[:space:]]*" comparison_report.md | sed 's/.*_IMAGE_PLACEHOLDER_//' | sort -u)
              
              if [ -n "$placeholder_files" ]; then
                echo "Found placeholder files: $placeholder_files"
                for filename in $placeholder_files; do
                  echo "=== Processing image embedding for placeholder: $filename ==="
                  
                  # Define image URLs
                  golden_url="$REPO_URL/golden/$filename"
                  output_url="$REPO_URL/$OUTPUTS_DIR/$filename"
                  diff_url="$REPO_URL/diffs/diff_$filename"
                  
                  # Verify URLs are accessible
                  output_url_valid=false
                  golden_url_valid=false
                  diff_url_valid=false
                  
                  if curl -s -f -I "$output_url" >/dev/null 2>&1; then
                    output_url_valid=true
                  fi
                  
                  if curl -s -f -I "$golden_url" >/dev/null 2>&1; then
                    golden_url_valid=true
                  fi
                  
                  if curl -s -f -I "$diff_url" >/dev/null 2>&1; then
                    diff_url_valid=true
                  fi
                  
                  # Replace placeholders with appropriate content
                  if grep -q "GOLDEN_IMAGE_PLACEHOLDER_${filename}" comparison_report.md; then
                    if [ "$golden_url_valid" = "true" ]; then
                      echo "  Replacing GOLDEN_IMAGE_PLACEHOLDER_${filename} with verified URL"
                      sed -i 's|GOLDEN_IMAGE_PLACEHOLDER_'"${filename}"'|![Golden Master]('"$golden_url"')|g' comparison_report.md
                    else
                      echo "  Replacing GOLDEN_IMAGE_PLACEHOLDER_${filename} with download fallback"
                      sed -i 's|GOLDEN_IMAGE_PLACEHOLDER_'"${filename}"'|**📁 Golden Master:** [`'"${filename}"'`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) (Download artifacts to view)|g' comparison_report.md
                    fi
                  fi
                  
                  if grep -q "NEW_IMAGE_PLACEHOLDER_${filename}" comparison_report.md; then
                    if [ "$output_url_valid" = "true" ]; then
                      echo "  Replacing NEW_IMAGE_PLACEHOLDER_${filename} with verified URL"
                      sed -i 's|NEW_IMAGE_PLACEHOLDER_'"${filename}"'|![New Output]('"$output_url"')|g' comparison_report.md
                    else
                      echo "  Replacing NEW_IMAGE_PLACEHOLDER_${filename} with download fallback"
                      sed -i 's|NEW_IMAGE_PLACEHOLDER_'"${filename}"'|**📁 New Output:** [`'"${filename}"'`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) (Download artifacts to view)|g' comparison_report.md
                    fi
                  fi
                  
                  if grep -q "DIFF_IMAGE_PLACEHOLDER_${filename}" comparison_report.md; then
                    if [ "$diff_url_valid" = "true" ]; then
                      echo "  Replacing DIFF_IMAGE_PLACEHOLDER_${filename} with verified URL"
                      sed -i 's|DIFF_IMAGE_PLACEHOLDER_'"${filename}"'|![Visual Difference]('"$diff_url"')|g' comparison_report.md
                    else
                      echo "  Replacing DIFF_IMAGE_PLACEHOLDER_${filename} with download fallback"
                      sed -i 's|DIFF_IMAGE_PLACEHOLDER_'"${filename}"'|**📁 Visual Difference:** [`diff_'"${filename}"'`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) (Download artifacts to view)|g' comparison_report.md
                    fi
                  fi
                done
              else
                echo "No placeholders found in report"
              fi
            fi
            
            # Add acceptance commands section only if there are changed images
            CHANGED_IMAGES="${{ steps.compare.outputs.changed_images }}"
            if [ -n "$CHANGED_IMAGES" ] && [ "$CHANGED_IMAGES" != " " ]; then
              echo "" >> comparison_report.md
              echo "## 🔧 Accept New Images" >> comparison_report.md
              echo "" >> comparison_report.md
              echo "To accept any of the new output images as golden masters, copy and paste the relevant commands below:" >> comparison_report.md
              echo "" >> comparison_report.md
              echo "\`\`\`" >> comparison_report.md
              for filename in $CHANGED_IMAGES; do
                echo "/accept-image $filename" >> comparison_report.md
              done
              echo "\`\`\`" >> comparison_report.md
              echo "" >> comparison_report.md
              echo "> **Note:** These commands will commit the new images to the **PR branch** (not the temporary display branch) and update the golden master files for future comparisons." >> comparison_report.md
            fi
            
            echo "" >> comparison_report.md
            echo "## 📦 Backup Download" >> comparison_report.md
            echo "" >> comparison_report.md
            echo "> **Note:** Images may take a few moments to load due to CDN propagation. If images don't display immediately, please refresh the page or try again in a minute." >> comparison_report.md
            echo "" >> comparison_report.md
            echo "> **If images are not displaying:** This can happen due to GitHub CDN delays or temporary branch access issues. All images are available for download in the workflow artifacts below." >> comparison_report.md
            echo "" >> comparison_report.md
            echo "If images don't load above, download the complete results: **[Visual Test Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**" >> comparison_report.md
            echo "" >> comparison_report.md
            echo "> 🧹 The temporary branch \`$BRANCH_NAME\` will be automatically cleaned up after 7 days." >> comparison_report.md
            
            # Remove the placeholder since we've embedded images directly
            sed -i '/IMAGE_EMBEDDING_PLACEHOLDER/d' comparison_report.md
            
            echo "✅ Enhanced comparison report generated with embedded images in detailed results"
          else
            echo "=== Image Embedding: DISABLED ==="
            echo "❌ Images were not committed, using enhanced fallback"
            echo "Reason: steps.commit_images.outputs.images_committed = '${{ steps.commit_images.outputs.images_committed }}'"
            
            # Enhanced fallback: Replace placeholders with artifact download links and file info
            echo "=== Debug: Fallback Replacement Processing ==="
            echo "Before fallback replacement:"
            grep -c ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md || echo "0"
            echo "Current directory: $(pwd)"
            echo "OUTPUTS_DIR: $OUTPUTS_DIR"
            echo "Files in OUTPUTS_DIR:"
            ls -la "$OUTPUTS_DIR"/ 2>/dev/null || echo "OUTPUTS_DIR not found"
            echo "=============================================="
            
            # Create artifact download URLs
            ARTIFACT_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            
            # Find all image files that might have placeholders and process them
            # Check both the outputs directory and any placeholders in the report
            image_files_found=false
            
            # First, try to process files from the outputs directory
            if [ -d "$OUTPUTS_DIR" ] && [ -n "$(ls -A "$OUTPUTS_DIR"/*.png 2>/dev/null)" ]; then
              echo "Processing images from outputs directory..."
              for output_file in "$OUTPUTS_DIR"/*.png; do
                if [ -f "$output_file" ]; then
                  image_files_found=true
                  filename=$(basename "$output_file")
                  golden_file="golden/$filename"
                  
                  echo "Processing fallback for $filename..."
                  
                  # Debug: Check what placeholders exist for this filename in fallback
                  echo "Checking for placeholders for $filename in fallback:"
                  grep -n ".*_IMAGE_PLACEHOLDER_${filename}" comparison_report.md || echo "No placeholders found for $filename"
                  
                  # Replace placeholders with download information and file details
                  if [ -f "$golden_file" ] || grep -q "GOLDEN_IMAGE_PLACEHOLDER_${filename}" comparison_report.md; then
                    # Add golden image info with download link (fix escaping)
                    golden_info="**📁 Golden Master:** [\`$filename\`]($ARTIFACT_URL) (Download artifacts to view)"
                    if [ -f "$golden_file" ]; then
                      file_size=$(stat -c%s "$golden_file" 2>/dev/null || echo 'Unknown')
                      golden_info="$golden_info<br/>**Size:** ${file_size} bytes"
                    fi
                    echo "  Replacing GOLDEN_IMAGE_PLACEHOLDER_${filename} with download info"
                    # Use mixed quotes to handle variables safely
                    sed -i 's|GOLDEN_IMAGE_PLACEHOLDER_'"${filename}"'|'"${golden_info}"'|g' comparison_report.md
                  fi
                  
                  # Replace new image placeholder with download info
                  if [ -f "$output_file" ]; then
                    file_size=$(stat -c%s "$output_file" 2>/dev/null || echo 'Unknown')
                    dimensions=$(python3 -c "from PIL import Image; img = Image.open('$output_file'); print(f'{img.width}x{img.height}')" 2>/dev/null || echo 'Unknown')
                    output_info="**📁 New Output:** [\`$filename\`]($ARTIFACT_URL) (Download artifacts to view)<br/>**Size:** ${file_size} bytes, **Dimensions:** $dimensions"
                    echo "  Replacing NEW_IMAGE_PLACEHOLDER_${filename} with download info"
                    sed -i 's|NEW_IMAGE_PLACEHOLDER_'"${filename}"'|'"${output_info}"'|g' comparison_report.md
                  fi
                  
                  # Replace diff image placeholder if it exists
                  if [ -f "diffs/diff_$filename" ]; then
                    file_size=$(stat -c%s "diffs/diff_$filename" 2>/dev/null || echo 'Unknown')
                    diff_info="**📁 Visual Difference:** [\`diff_$filename\`]($ARTIFACT_URL) (Download artifacts to view)<br/>**Size:** ${file_size} bytes"
                    echo "  Replacing DIFF_IMAGE_PLACEHOLDER_${filename} with download info"
                    sed -i 's|DIFF_IMAGE_PLACEHOLDER_'"${filename}"'|'"${diff_info}"'|g' comparison_report.md
                  else
                    # Remove diff placeholder if no diff was generated
                    echo "  Removing DIFF_IMAGE_PLACEHOLDER_${filename} (no diff generated)"
                    sed -i "/DIFF_IMAGE_PLACEHOLDER_${filename}/d" comparison_report.md
                  fi
                fi
              done
            fi
            
            # If no files were found in outputs directory, try to extract filenames from placeholders
            if [ "$image_files_found" = "false" ]; then
              echo "No files found in outputs directory, extracting filenames from placeholders..."
              
              # Extract all unique filenames from placeholders in the report
              placeholder_files=$(grep -o ".*_IMAGE_PLACEHOLDER_[^[:space:]]*" comparison_report.md | sed 's/.*_IMAGE_PLACEHOLDER_//' | sort -u)
              
              if [ -n "$placeholder_files" ]; then
                echo "Found placeholder files: $placeholder_files"
                for filename in $placeholder_files; do
                  echo "Processing placeholder-based fallback for $filename..."
                  
                  # Replace all placeholders for this filename with download links
                  golden_info="**📁 Golden Master:** [\`$filename\`]($ARTIFACT_URL) (Download artifacts to view)"
                  output_info="**📁 New Output:** [\`$filename\`]($ARTIFACT_URL) (Download artifacts to view)"
                  diff_info="**📁 Visual Difference:** [\`diff_$filename\`]($ARTIFACT_URL) (Download artifacts to view)"
                  
                  # Replace placeholders
                  if grep -q "GOLDEN_IMAGE_PLACEHOLDER_${filename}" comparison_report.md; then
                    echo "  Replacing GOLDEN_IMAGE_PLACEHOLDER_${filename}"
                    sed -i 's|GOLDEN_IMAGE_PLACEHOLDER_'"${filename}"'|'"${golden_info}"'|g' comparison_report.md
                  fi
                  
                  if grep -q "NEW_IMAGE_PLACEHOLDER_${filename}" comparison_report.md; then
                    echo "  Replacing NEW_IMAGE_PLACEHOLDER_${filename}"
                    sed -i 's|NEW_IMAGE_PLACEHOLDER_'"${filename}"'|'"${output_info}"'|g' comparison_report.md
                  fi
                  
                  if grep -q "DIFF_IMAGE_PLACEHOLDER_${filename}" comparison_report.md; then
                    echo "  Replacing DIFF_IMAGE_PLACEHOLDER_${filename}"
                    sed -i 's|DIFF_IMAGE_PLACEHOLDER_'"${filename}"'|'"${diff_info}"'|g' comparison_report.md
                  fi
                done
              else
                echo "No placeholders found in report to process"
              fi
            fi
            
            echo "=== Debug: After Fallback Replacement ==="
            echo "After fallback replacement:"
            grep -c ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md || echo "0"
            echo "========================================"
            
            sed -i 's|IMAGE_EMBEDDING_PLACEHOLDER|## 🖼️ Image Files Available for Download\n\nImages could not be embedded directly in this PR comment. This can happen due to GitHub API limitations or temporary branch creation issues.\n\n📦 **[Download Visual Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**\n\n### Artifact Contents:\n- **`'$OUTPUTS_DIR'/`** - New test images generated by your application\n- **`diffs/`** - Visual difference images highlighting changes\n- **`golden/`** - Golden master reference images\n- **`comparison_report.md`** - This detailed report\n\n> **💡 Tip:** Extract the artifact ZIP file and open the images in your preferred image viewer to review the visual changes.|' comparison_report.md
          fi
        else
          echo "No comparison report found"
        fi
        
        # Debug: Show final report content
        echo ""
        echo "=== Debug: Final Report Content ==="
        if [ -f comparison_report.md ]; then
          echo "Report generated successfully. Length: $(wc -l < comparison_report.md) lines"
          echo ""
          echo "First 50 lines of report:"
          head -50 comparison_report.md
          echo ""
          echo "Checking for any remaining placeholders:"
          if grep -n ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md; then
            echo "❌ Found unreplaced placeholders above"
          else
            echo "✅ No unreplaced placeholders found"
          fi
          echo ""
          echo "Checking for embedded images:"
          if grep -c "!\[.*\](" comparison_report.md; then
            echo "✅ Found $(grep -c "!\[.*\](" comparison_report.md) embedded images"
            grep "!\[.*\](" comparison_report.md | head -3
          else
            echo "❌ No embedded images found"
          fi
        else
          echo "❌ No comparison report found"
        fi
        echo "=================================="
    
    - name: Final placeholder verification and cleanup
      if: always()
      run: |
        set -euo pipefail
        
        echo "=== Final Placeholder Verification ==="
        
        if [ -f comparison_report.md ]; then
          echo "Report exists, checking for remaining placeholders..."
          
          # Count remaining placeholders
          remaining_placeholders=$(grep -c ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md || echo "0")
          echo "Remaining placeholders: $remaining_placeholders"
          
          if [ "$remaining_placeholders" -gt 0 ]; then
            echo "❌ Found unreplaced placeholders:"
            grep -n ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md || echo "None found"
            
            echo ""
            echo "=== Emergency placeholder cleanup ==="
            echo "Forcibly replacing any remaining placeholders with download links..."
            
            # Extract all remaining placeholder filenames and replace them
            ARTIFACT_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            
            # Get unique filenames from any remaining placeholders
            remaining_files=$(grep -o ".*_IMAGE_PLACEHOLDER_[^[:space:]]*" comparison_report.md 2>/dev/null | sed 's/.*_IMAGE_PLACEHOLDER_//' | sort -u || echo "")
            
            if [ -n "$remaining_files" ]; then
              for filename in $remaining_files; do
                echo "Emergency cleanup for: $filename"
                
                # Replace any remaining placeholders with simple download links
                sed -i 's|GOLDEN_IMAGE_PLACEHOLDER_'"${filename}"'|**📁 Golden Master:** [`'"${filename}"'`]('"$ARTIFACT_URL"') (Download artifacts to view)|g' comparison_report.md
                sed -i 's|NEW_IMAGE_PLACEHOLDER_'"${filename}"'|**📁 New Output:** [`'"${filename}"'`]('"$ARTIFACT_URL"') (Download artifacts to view)|g' comparison_report.md
                sed -i 's|DIFF_IMAGE_PLACEHOLDER_'"${filename}"'|**📁 Visual Difference:** [`diff_'"${filename}"'`]('"$ARTIFACT_URL"') (Download artifacts to view)|g' comparison_report.md
              done
              
              # Final check
              final_remaining=$(grep -c ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md || echo "0")
              echo "After emergency cleanup - remaining placeholders: $final_remaining"
            fi
          else
            echo "✅ No unreplaced placeholders found"
          fi
          
          # Check for embedded images
          embedded_images=$(grep -c "!\[.*\](" comparison_report.md || echo "0")
          echo "Embedded images found: $embedded_images"
          
          if [ "$embedded_images" -gt 0 ]; then
            echo "✅ Found embedded images:"
            grep "!\[.*\](" comparison_report.md | head -3
          fi
          
          echo ""
          echo "=== Final Report Statistics ==="
          echo "Report length: $(wc -l < comparison_report.md) lines"
          echo "Report size: $(wc -c < comparison_report.md) bytes"
          echo "Embedded images: $embedded_images"
          echo "Remaining placeholders: $(grep -c ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md || echo "0")"
          
        else
          echo "❌ No comparison report found!"
        fi
        
        echo ""
        echo "=== Debug: GitHub Context Information ==="
        echo "Event name: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "Head ref: ${{ github.head_ref }}"
        echo "Base ref: ${{ github.base_ref }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Run number: ${{ github.run_number }}"
        echo "Actor: ${{ github.actor }}"
        echo "SHA: ${{ github.sha }}"
        echo ""
        echo "Pull request context:"
        echo "  PR number: ${{ github.event.pull_request.number || 'N/A' }}"
        echo "  Issue number: ${{ github.event.issue.number || 'N/A' }}"
        echo "  Input PR number: ${{ inputs.pr_number || 'N/A' }}"
        echo ""
        echo "Workflow context:"
        echo "  Workflow name: ${{ github.workflow }}"
        echo "  Job name: ${{ github.job }}"
        echo "  Step name: Final placeholder verification and cleanup"
        echo ""
        echo "Expected behavior:"
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "  ✅ Running in pull_request context - PR comments should work"
        elif [ "${{ inputs.pr_number }}" != "" ]; then
          echo "  ✅ PR number provided via input - PR comments should work"
        elif [ "${{ github.event.pull_request.number }}" != "" ]; then
          echo "  ✅ PR number available - PR comments should work"
        else
          echo "  ⚠️  Not in pull_request context and no PR number provided - PR comments will be logged to console instead"
          echo "     This is normal for push events, workflow_dispatch, or scheduled runs"
          echo "     For workflow_call, pass pr_number input parameter to enable PR comments"
        fi
        echo "=========================================="

    - name: Debug outputs before commenting
      run: |
        echo "=== Debug Step Outputs ==="
        echo "changes_detected: '${{ steps.compare.outputs.changes_detected }}'"
        echo "changed_images: '${{ steps.compare.outputs.changed_images }}'"
        echo "images_committed: '${{ steps.commit_images.outputs.images_committed }}'"
        echo "branch_name: '${{ steps.commit_images.outputs.branch_name }}'"
        echo "========================="
        echo ""
        echo "=== Debug Image Embedding Status ==="
        if [ "${{ steps.commit_images.outputs.images_committed }}" = "true" ]; then
          echo "✅ Images were committed successfully - replacement should happen"
        else
          echo "❌ Images were NOT committed - replacement will be skipped"
          echo "This means the commit images step failed or didn't detect changes to commit"
        fi
        echo ""
        echo "=== Debug Report File Status ==="
        if [ -f comparison_report.md ]; then
          echo "✅ comparison_report.md exists"
          echo "Report size: $(wc -l < comparison_report.md) lines"
          echo "Checking for placeholders in report:"
          if grep -q ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md; then
            echo "✅ Found placeholders in report:"
            grep ".*_IMAGE_PLACEHOLDER_.*" comparison_report.md | head -5
          else
            echo "❌ No placeholders found in report"
          fi
        else
          echo "❌ comparison_report.md does not exist"
        fi
        echo "=================================="

    - name: Comment PR with visual diff results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Check if we're in a pull request context
          console.log('=== Debug: GitHub Context Information ===');
          console.log(`Event name: ${context.eventName}`);
          console.log(`Issue number: ${context.issue?.number || 'undefined'}`);
          console.log(`Payload issue: ${context.payload.issue?.number || 'undefined'}`);
          console.log(`Payload pull_request: ${context.payload.pull_request?.number || 'undefined'}`);
          console.log(`Repository: ${context.repo.owner}/${context.repo.repo}`);
          console.log('==========================================');
          
          // Determine if we can create a comment
          let issueNumber = null;
          let canComment = false;
          
          // Check if PR number was passed as input (for workflow_call context)
          const inputPrNumber = '${{ inputs.pr_number }}';
          console.log(`Input PR number: ${inputPrNumber}`);
          
          // Try multiple ways to get the issue/PR number
          if (inputPrNumber && inputPrNumber !== '') {
            issueNumber = parseInt(inputPrNumber);
            canComment = true;
            console.log(`Found issue number from input parameter: ${issueNumber}`);
          } else if (context.issue?.number) {
            issueNumber = context.issue.number;
            canComment = true;
            console.log(`Found issue number from context.issue: ${issueNumber}`);
          } else if (context.payload.pull_request?.number) {
            issueNumber = context.payload.pull_request.number;
            canComment = true;
            console.log(`Found issue number from payload.pull_request: ${issueNumber}`);
          } else if (context.payload.issue?.number) {
            issueNumber = context.payload.issue.number;
            canComment = true;
            console.log(`Found issue number from payload.issue: ${issueNumber}`);
          } else {
            console.log('❌ No issue/PR number found - cannot create comment');
            console.log('This is likely because the workflow was not triggered by a pull request');
            console.log('and no pr_number input was provided for workflow_call context');
            console.log('Event type:', context.eventName);
            canComment = false;
          }
          
          // Determine what type of report to create
          let report;
          const changesDetected = '${{ steps.compare.outputs.changes_detected }}';
          const compareStepResult = '${{ steps.compare.outcome }}';
          const imagesCommitted = '${{ steps.commit_images.outputs.images_committed }}' === 'true';
          
          console.log(`Compare step result: ${compareStepResult}`);
          console.log(`Changes detected: ${changesDetected}`);
          console.log(`Images committed successfully: ${imagesCommitted}`);
          
          if (compareStepResult === 'failure' || changesDetected === 'error') {
            // Compare step failed or encountered an error - try to read the report file first
            try {
              report = fs.readFileSync('comparison_report.md', 'utf8');
              console.log('Successfully read comparison report file with error details');
            } catch (error) {
              console.log('Could not read comparison report file, generating fallback error report');
              // Fallback error report
              report = '## ❌ Visual Regression Test Failed\n\n' +
                       '**Error:** The visual comparison process encountered an error and could not complete.\n\n' +
                       '**Test Run:** ' + new Date().toISOString().replace('T', ' ').substr(0, 19) + ' UTC\n\n' +
                       '**Error Details:** ' + error.message + '\n\n' +
                       '### Troubleshooting Steps:\n' +
                       '1. Check that test images were generated properly in the outputs directory\n' +
                       '2. Verify that NVIDIA FLIP is installed correctly\n' +
                       '3. Check the workflow logs for specific error messages\n' +
                       '4. Ensure golden master images exist and are accessible\n\n' +
                       '**Action Required:** Please check the workflow logs and fix any underlying issues before retrying.\n\n' +
                       '📦 **[Download Workflow Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**';
            }
          } else if (changesDetected === 'true') {
            // Changes detected - use full comparison report
            try {
              report = fs.readFileSync('comparison_report.md', 'utf8');
            } catch (error) {
              report = '## ❌ Visual Regression Test Results\n\n' +
                       '**Error:** Comparison completed but report file could not be read.\n\n' +
                       '**Test Run:** ' + new Date().toISOString().replace('T', ' ').substr(0, 19) + ' UTC\n\n' +
                       '**Error Details:** ' + error.message + '\n\n' +
                       '📦 **[Download Visual Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**';
            }
          } else if (changesDetected === 'false') {
            // No changes detected - create success report
            report = '✅ **Visual tests passed!** No differences detected.\n\n' +
                     '**Test Run:** ' + new Date().toISOString().replace('T', ' ').substr(0, 19) + ' UTC\n\n' +
                     'All generated images match their golden master references within acceptable tolerance.';
          } else {
            // Unexpected state - create diagnostic report
            report = '## ⚠️ Visual Regression Test Status Unknown\n\n' +
                     '**Warning:** The visual comparison process completed but the results are unclear.\n\n' +
                     '**Test Run:** ' + new Date().toISOString().replace('T', ' ').substr(0, 19) + ' UTC\n\n' +
                     '**Debug Information:**\n' +
                     '- Compare step outcome: ' + compareStepResult + '\n' +
                     '- Changes detected value: "' + changesDetected + '"\n' +
                     '- Images committed: ' + imagesCommitted + '\n\n' +
                     '**Action Required:** Please check the workflow logs to determine what happened.\n\n' +
                     '📦 **[Download Workflow Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**';
          }
          
          if (!canComment) {
            // Cannot create comment - log the report instead
            console.log('===============================================');
            console.log('VISUAL DIFF RESULTS (Comment could not be created):');
            console.log('===============================================');
            console.log(report);
            console.log('===============================================');
            console.log('');
            console.log('💡 To see visual diff results as PR comments:');
            console.log('   - Ensure this workflow is triggered by a pull_request event');
            console.log('   - Or when calling via workflow_call, pass pr_number input parameter');
            console.log('   - Example: pr_number: ${{ github.event.pull_request.number }}');
            console.log('');
            console.log('📦 Visual test results are still available as workflow artifacts');
            console.log('   Download link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}');
            return;
          }
          
          try {
            // Clean up old bot comments first
            console.log(`Attempting to list comments for issue/PR #${issueNumber}`);
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            const botComments = comments.data.filter(comment => 
              comment.user.type === 'Bot' && 
              (comment.body.includes('Visual Regression Test') ||
               comment.body.includes('Visual tests passed'))
            );
            
            console.log(`Found ${botComments.length} old bot comments to clean up`);
            
            // Delete old bot comments to avoid confusion
            for (const comment of botComments) {
              try {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id
                });
                console.log(`Deleted old bot comment: ${comment.id}`);
              } catch (error) {
                console.log(`Failed to delete comment ${comment.id}: ${error.message}`);
              }
            }
            
            // Always create a new comment
            console.log(`Creating new comment on issue/PR #${issueNumber}`);
            const newComment = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: report
            });
            
            console.log(`✅ Successfully created comment: ${newComment.data.html_url}`);
            
          } catch (error) {
            console.error('❌ Failed to create PR comment:', error.message);
            console.error('Error details:', error);
            
            // Log the report since comment creation failed
            console.log('===============================================');
            console.log('VISUAL DIFF RESULTS (Comment creation failed):');
            console.log('===============================================');
            console.log(report);
            console.log('===============================================');
            console.log('');
            console.log('📦 Visual test results are available as workflow artifacts');
            console.log('   Download link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}');
          }

  cleanup-old-branches:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Clean up old visual diff branches
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Get current timestamp (7 days ago)
        CUTOFF_DATE=$(date -d '7 days ago' '+%Y-%m-%d')
        echo "Cleaning up visual diff branches older than: $CUTOFF_DATE"
        
        # Find and delete old visual-diff branches
        git branch -r | grep 'origin/visual-diff-' | while read -r branch; do
          branch_name=${branch#origin/}
          echo "Checking branch: $branch_name"
          
          # Get the last commit date of the branch
          if git show --format="%ci" --no-patch "$branch" > /dev/null 2>&1; then
            BRANCH_DATE=$(git show --format="%ci" --no-patch "$branch" | cut -d' ' -f1)
            echo "Branch date: $BRANCH_DATE"
            
            # Compare dates (if branch is older than cutoff, delete it)
            if [[ "$BRANCH_DATE" < "$CUTOFF_DATE" ]]; then
              echo "Deleting old branch: $branch_name"
              git push origin --delete "$branch_name" || echo "Failed to delete $branch_name (may not exist)"
            else
              echo "Keeping recent branch: $branch_name"
            fi
          else
            echo "Could not get date for branch: $branch_name"
          fi
        done
