name: Visual Diff and PR Report

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  visual-diff:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
    
    - name: Install NVIDIA FLIP for image comparison
      run: |
        # Install NVIDIA FLIP from PyPI for high-fidelity image comparison
        pip install flip-evaluator
        flip --help
    
    - name: Setup Python for test execution
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Pillow numpy
    
    - name: Create necessary directories
      run: |
        mkdir -p outputs
        mkdir -p diffs
        mkdir -p golden
    
    - name: Generate test outputs
      run: |
        # Run the application's test suite to generate output images
        python generate_test_images.py
    
    - name: Compare images and generate diffs
      id: compare
      run: |
        # Initialize variables
        CHANGED_IMAGES=""
        CHANGES_DETECTED=false
        
        # Create comparison report
        echo "# Visual Regression Test Results" > comparison_report.md
        echo "" >> comparison_report.md
        
        # Process each output image
        for output_file in outputs/*.png; do
          if [ ! -f "$output_file" ]; then
            echo "No output images found"
            continue
          fi
          
          filename=$(basename "$output_file")
          golden_file="golden/$filename"
          diff_file="diffs/diff_$filename"
          
          echo "Processing $filename..."
          
          # Check if golden image exists
          if [ ! -f "$golden_file" ]; then
            # New image - no golden master exists
            echo "⚠️ **New Image:** \`$filename\`" >> comparison_report.md
            echo "" >> comparison_report.md
            echo "| New Output |" >> comparison_report.md
            echo "|------------|" >> comparison_report.md
            echo "| ![New Output](./outputs/$filename) |" >> comparison_report.md
            echo "" >> comparison_report.md
            echo "To accept this new image as the golden master, comment: \`/accept-image $filename\`" >> comparison_report.md
            echo "" >> comparison_report.md
            
            CHANGED_IMAGES="$CHANGED_IMAGES $filename"
            CHANGES_DETECTED=true
          else
            # Fetch the specific golden LFS file
            git lfs pull --include "$golden_file"
            
            # Compare using NVIDIA FLIP for high-fidelity comparison
            # FLIP outputs difference metrics and generates diff images
            basename_no_ext=$(basename "$filename" .png)
            diff_basename="diff_${basename_no_ext}"
            
            # Debug: Print the command that will be executed
            echo "Variables:"
            echo "  golden_file: '$golden_file'"
            echo "  output_file: '$output_file'"
            echo "  diff_basename: '$diff_basename'"
            echo "Golden file exists: $([ -f "$golden_file" ] && echo 'YES' || echo 'NO')"
            echo "Output file exists: $([ -f "$output_file" ] && echo 'YES' || echo 'NO')"
            echo ""
            
            # Ensure both files exist before running FLIP
            if [ ! -f "$golden_file" ]; then
              echo "Error: Golden file does not exist: $golden_file"
              continue
            fi
            if [ ! -f "$output_file" ]; then
              echo "Error: Output file does not exist: $output_file"
              continue
            fi
            
            # Use short-form parameters to avoid any argument parsing issues
            echo "Running FLIP command: flip -r '$golden_file' -t '$output_file' -d diffs -b '$diff_basename' -v 1"
            
            # Run FLIP with short-form parameters for better compatibility
            flip_output=$(flip -r "$golden_file" -t "$output_file" -d diffs -b "$diff_basename" -v 1 2>&1)
            flip_exit_code=$?
            
            echo "FLIP exit code: $flip_exit_code"
            echo "FLIP output: $flip_output"
            
            # Check if FLIP command succeeded
            if [ $flip_exit_code -ne 0 ]; then
              echo "Error: FLIP command failed with exit code $flip_exit_code"
              echo "Error output: $flip_output"
              continue
            fi
            
            # Extract the mean FLIP error from the output
            mean_error=$(echo "$flip_output" | grep "Mean:" | awk '{print $2}')
            
            # Check if there's any meaningful difference (FLIP error > 0.001)
            # Using awk for floating point comparison
            is_different=$(echo "$mean_error" | awk '{if ($1 > 0.001) print "yes"; else print "no"}')
            
            if [ "$is_different" = "yes" ]; then
              echo "🔄 **Changed Image:** \`$filename\`" >> comparison_report.md
              echo "" >> comparison_report.md
              echo "**FLIP Error:** $mean_error" >> comparison_report.md
              echo "" >> comparison_report.md
              echo "| Difference | New Output |" >> comparison_report.md
              echo "|------------|------------|" >> comparison_report.md
              echo "| ![Difference](./diffs/${diff_basename}.png) | ![New Output](./outputs/$filename) |" >> comparison_report.md
              echo "" >> comparison_report.md
              echo "To accept this change, comment: \`/accept-image $filename\`" >> comparison_report.md
              echo "" >> comparison_report.md
              
              CHANGED_IMAGES="$CHANGED_IMAGES $filename"
              CHANGES_DETECTED=true
            fi
          fi
        done
        
        # Set outputs for next steps
        echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT
        echo "changed_images=$CHANGED_IMAGES" >> $GITHUB_OUTPUT
        
        # If no changes, add a success message
        if [ "$CHANGES_DETECTED" = "false" ]; then
          echo "✅ **All visual tests passed!** No differences detected." >> comparison_report.md
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: visual-test-results-${{ github.event.pull_request.number }}
        path: |
          outputs/
          diffs/
        retention-days: 30
    
    - name: Comment PR with results
      if: steps.compare.outputs.changes_detected == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('comparison_report.md', 'utf8');
          
          // Find existing bot comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Visual Regression Test Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: report
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }
    
    - name: Comment PR with success
      if: steps.compare.outputs.changes_detected == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const report = "✅ **All visual tests passed!** No differences detected.";
          
          // Find existing bot comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Visual Regression Test Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: report
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }