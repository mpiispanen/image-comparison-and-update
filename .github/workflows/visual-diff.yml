name: Visual Diff and PR Report

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  visual-diff:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
    
    - name: Install ImageMagick for image comparison
      run: |
        # Install ImageMagick for reliable image comparison
        sudo apt-get update
        sudo apt-get install -y imagemagick
        compare -version
    
    - name: Setup Python for test execution
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Pillow numpy
    
    - name: Create necessary directories
      run: |
        mkdir -p outputs
        mkdir -p diffs
        mkdir -p golden
    
    - name: Generate test outputs
      run: |
        # Run the application's test suite to generate output images
        python generate_test_images.py
    
    - name: Compare images and generate diffs
      id: compare
      run: |
        # Initialize variables
        CHANGED_IMAGES=""
        CHANGES_DETECTED=false
        
        # Create comparison report
        echo "# Visual Regression Test Results" > comparison_report.md
        echo "" >> comparison_report.md
        
        # Process each output image
        for output_file in outputs/*.png; do
          if [ ! -f "$output_file" ]; then
            echo "No output images found"
            continue
          fi
          
          filename=$(basename "$output_file")
          golden_file="golden/$filename"
          diff_file="diffs/diff_$filename"
          
          echo "Processing $filename..."
          
          # Check if golden image exists
          if [ ! -f "$golden_file" ]; then
            # New image - no golden master exists
            echo "⚠️ **New Image:** \`$filename\`" >> comparison_report.md
            echo "" >> comparison_report.md
            echo "| New Output |" >> comparison_report.md
            echo "|------------|" >> comparison_report.md
            echo "| ![New Output](./outputs/$filename) |" >> comparison_report.md
            echo "" >> comparison_report.md
            echo "To accept this new image as the golden master, comment: \`/accept-image $filename\`" >> comparison_report.md
            echo "" >> comparison_report.md
            
            CHANGED_IMAGES="$CHANGED_IMAGES $filename"
            CHANGES_DETECTED=true
          else
            # Fetch the specific golden LFS file
            git lfs pull --include "$golden_file"
            
            # Compare using ImageMagick compare
            compare "$golden_file" "$output_file" "$diff_file" 2>/dev/null
            compare_exit_code=$?
            
            if [ $compare_exit_code -ne 0 ]; then
              # Images are different
              echo "🔄 **Changed Image:** \`$filename\`" >> comparison_report.md
              echo "" >> comparison_report.md
              echo "| Difference | New Output |" >> comparison_report.md
              echo "|------------|------------|" >> comparison_report.md
              echo "| ![Difference](./diffs/diff_$filename) | ![New Output](./outputs/$filename) |" >> comparison_report.md
              echo "" >> comparison_report.md
              echo "To accept this change, comment: \`/accept-image $filename\`" >> comparison_report.md
              echo "" >> comparison_report.md
              
              CHANGED_IMAGES="$CHANGED_IMAGES $filename"
              CHANGES_DETECTED=true
            fi
          fi
        done
        
        # Set outputs for next steps
        echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT
        echo "changed_images=$CHANGED_IMAGES" >> $GITHUB_OUTPUT
        
        # If no changes, add a success message
        if [ "$CHANGES_DETECTED" = "false" ]; then
          echo "✅ **All visual tests passed!** No differences detected." >> comparison_report.md
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: visual-test-results-${{ github.event.pull_request.number }}
        path: |
          outputs/
          diffs/
        retention-days: 30
    
    - name: Comment PR with results
      if: steps.compare.outputs.changes_detected == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('comparison_report.md', 'utf8');
          
          // Find existing bot comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Visual Regression Test Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: report
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }
    
    - name: Comment PR with success
      if: steps.compare.outputs.changes_detected == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const report = "✅ **All visual tests passed!** No differences detected.";
          
          // Find existing bot comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Visual Regression Test Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: report
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }