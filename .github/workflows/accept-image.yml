name: Accept New Golden Image

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read  # Needed for artifact access

jobs:
  accept-image:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/accept-image')
    
    steps:
    - name: Parse command and check permissions
      id: parse
      uses: actions/github-script@60a0d83039c74a4adc4458365330bdf5c1de5c6b # v7.0.1
      with:
        script: |
          // Extract image name from comment with input validation
          const comment = context.payload.comment.body;
          const match = comment.match(/^\/accept-image\s+(.+)$/);
          
          if (!match) {
            core.setFailed('Invalid command format. Use: /accept-image <image-name>');
            return;
          }
          
          const imageName = match[1].trim();
          
          // Validate image name to prevent injection attacks
          if (!/^[a-zA-Z0-9._-]+\.(png|jpg|jpeg)$/i.test(imageName)) {
            core.setFailed('Invalid image name. Must be alphanumeric with valid image extension (.png, .jpg, .jpeg)');
            return;
          }
          
          console.log(`Image to accept: ${imageName}`);
          
          // Check if commenter has write permissions
          const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
            owner: context.repo.owner,
            repo: context.repo.repo,
            username: context.payload.comment.user.login
          });
          
          const hasWriteAccess = ['write', 'admin'].includes(collaborator.permission);
          
          if (!hasWriteAccess) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `❌ @${context.payload.comment.user.login} does not have write permissions to accept images.`
            });
            core.setFailed('User does not have write permissions');
            return;
          }
          
          core.setOutput('image_name', imageName);
          core.setOutput('commenter', context.payload.comment.user.login);
    
    - name: Get PR details
      id: pr
      uses: actions/github-script@60a0d83039c74a4adc4458365330bdf5c1de5c6b # v7.0.1
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          core.setOutput('head_ref', pr.head.ref);
          core.setOutput('head_sha', pr.head.sha);
    
    - name: Install Git LFS
      run: |
        sudo apt-get update
        sudo apt-get install -y git-lfs
        git lfs install
    
    - name: Checkout PR branch
      uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      with:
        ref: ${{ steps.pr.outputs.head_ref }}
        token: ${{ secrets.GITHUB_TOKEN }}
        lfs: true
        fetch-depth: 0
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: visual-test-results-${{ github.event.issue.number }}
        path: ./artifacts/
    
    - name: Accept and commit image
      run: |
        set -euo pipefail  # Enable strict error handling
        
        IMAGE_NAME="${{ steps.parse.outputs.image_name }}"
        COMMENTER="${{ steps.parse.outputs.commenter }}"
        
        echo "=== Accepting image: $IMAGE_NAME ==="
        echo "Current branch: $(git branch --show-current)"
        echo "This will commit to the PR branch: ${{ steps.pr.outputs.head_ref }}"
        echo "NOT to any temporary display branches"
        echo "=============================================="
        
        # Ensure golden directory exists
        mkdir -p golden
        
        # Check if the image exists in artifacts with secure path handling
        if [ ! -f "artifacts/outputs/$IMAGE_NAME" ]; then
          echo "Error: Image $IMAGE_NAME not found in artifacts"
          echo "Available files in artifacts/outputs/:"
          ls -la artifacts/outputs/ || echo "No outputs directory found"
          exit 1
        fi
        
        # Verify the source file is actually an image
        if ! file "artifacts/outputs/$IMAGE_NAME" | grep -q "image data"; then
          echo "Error: $IMAGE_NAME is not a valid image file"
          exit 1
        fi
        
        # Move the image to golden directory
        cp "artifacts/outputs/$IMAGE_NAME" "golden/$IMAGE_NAME"
        
        # Clean up temporary artifacts from the repository (if they exist)
        rm -f "outputs/$IMAGE_NAME" 2>/dev/null || true
        rm -f "diffs/diff_$(basename "$IMAGE_NAME" .png).png" 2>/dev/null || true
        
        # Add and commit the changes
        git add "golden/$IMAGE_NAME"
        git add -u outputs/ diffs/ 2>/dev/null || true  # Remove deleted files
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit for $IMAGE_NAME"
        else
          git commit -m "feat(visuals): accept new golden image for $IMAGE_NAME
          
          Accepted by: $COMMENTER
          Source: PR #${{ github.event.issue.number }}"
          
          # Push the changes to the PR branch (NOT to temporary display branches)
          echo "Pushing to PR branch: ${{ steps.pr.outputs.head_ref }}"
          if timeout 60 git push origin "${{ steps.pr.outputs.head_ref }}"; then
            echo "Successfully committed and pushed $IMAGE_NAME to golden directory on PR branch"
          else
            echo "Failed to push changes within timeout"
            exit 1
          fi
        fi
    
    - name: Comment on success
      uses: actions/github-script@60a0d83039c74a4adc4458365330bdf5c1de5c6b # v7.0.1
      with:
        script: |
          const imageName = '${{ steps.parse.outputs.image_name }}';
          const commenter = '${{ steps.parse.outputs.commenter }}';
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `✅ Successfully accepted \`${imageName}\` as the new golden image!\n\nThe image has been committed to the \`golden/\` directory and will be used for future comparisons.\n\nAccepted by: @${commenter}`
          });
    
    - name: Comment on failure
      if: failure()
      uses: actions/github-script@60a0d83039c74a4adc4458365330bdf5c1de5c6b # v7.0.1
      with:
        script: |
          const imageName = '${{ steps.parse.outputs.image_name }}';
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `❌ Failed to accept \`${imageName}\` as the new golden image. Please check the workflow logs for details.`
          });