name: Accept New Golden Image

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read  # Needed for artifact access

jobs:
  parse-and-validate:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/accept-image')
    outputs:
      image_name: ${{ steps.parse.outputs.image_name }}
      commenter: ${{ steps.parse.outputs.commenter }}
    
    steps:
    - name: Parse command and check permissions
      id: parse
      uses: actions/github-script@v7
      with:
        script: |
          // Extract image name from comment with input validation
          const comment = context.payload.comment.body;
          const match = comment.match(/^\/accept-image\s+(.+)$/);
          
          if (!match) {
            core.setFailed('Invalid command format. Use: /accept-image <image-name>');
            return;
          }
          
          const imageName = match[1].trim();
          
          // Validate image name to prevent injection attacks
          if (!/^[a-zA-Z0-9._-]+\.(png|jpg|jpeg)$/i.test(imageName)) {
            core.setFailed('Invalid image name. Must be alphanumeric with valid image extension (.png, .jpg, .jpeg)');
            return;
          }
          
          console.log(`Image to accept: ${imageName}`);
          
          // Check if commenter has write permissions
          const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
            owner: context.repo.owner,
            repo: context.repo.repo,
            username: context.payload.comment.user.login
          });
          
          const hasWriteAccess = ['write', 'admin'].includes(collaborator.permission);
          
          if (!hasWriteAccess) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `❌ @${context.payload.comment.user.login} does not have write permissions to accept images.`
            });
            core.setFailed('User does not have write permissions');
            return;
          }
          
          core.setOutput('image_name', imageName);
          core.setOutput('commenter', context.payload.comment.user.login);

  accept-image:
    needs: parse-and-validate
    uses: ./.github/workflows/accept-image-reusable.yml
    with:
      image: ${{ needs.parse-and-validate.outputs.image_name }}
      pr_number: ${{ github.event.issue.number }}
      target_repo: ${{ github.repository }}
      artifact_name: visual-test-results-${{ github.event.issue.number }}
      reference_dir: golden
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read

  update-comment:
    needs: [parse-and-validate, accept-image]
    runs-on: ubuntu-latest
    if: always() && needs.parse-and-validate.result == 'success'
    
    steps:
    - name: Update comment with commenter attribution
      uses: actions/github-script@v7
      with:
        script: |
          const imageName = '${{ needs.parse-and-validate.outputs.image_name }}';
          const commenter = '${{ needs.parse-and-validate.outputs.commenter }}';
          const acceptJobResult = '${{ needs.accept-image.result }}';
          
          if (acceptJobResult === 'success') {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `✅ Successfully accepted \`${imageName}\` as the new golden image!\n\nThe image has been committed to the \`golden/\` directory and will be used for future comparisons.\n\nAccepted by: @${commenter}`
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `❌ Failed to accept \`${imageName}\` as the new golden image. Please check the workflow logs for details.`
            });
          }